cd /users2/cpca56132020/moliveira/folders/Nopol_QUIXBUGS_PASCAL/Nopol_QuixBugs_PASCAL_;
export JAVA_TOOL_OPTIONS="-Dfile.encoding=UTF8 -Duser.language=en-US -Duser.country=US -Duser.language=en";
TZ="America/New_York"; export TZ;
export PATH="/usr/lib/jvm/java-1.8.0-openjdk/bin:$PATH";
export JAVA_HOME="/usr/lib/jvm/java-1.8.0-openjdk/bin";
time java -Xmx4g -Xms1g -cp /users2/cpca56132020/moliveira/RepairThemAll/script/../repair_tools/nopol.jar:/usr/lib/jvm/java-1.8.0-openjdk/bin/../lib/tools.jar fr.inria.lille.repair.Main \
	--mode repair \
	--type pre_then_cond \
	--oracle angelic \
	--synthesis smt \
	--flocal gzoltar \
	--json \
	--solver z3 \
	--solver-path /users2/cpca56132020/moliveira/RepairThemAll/script/../libs/z3/build/z3 \
	--complianceLevel 8 \
	--source src/main/java \
	--classpath "target/classes:target/test-classes:/users2/cpca56132020/moliveira/.m2/repository/junit/junit/4.11/junit-4.11.jar:/users2/cpca56132020/moliveira/.m2/repository/org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.jar:/users2/cpca56132020/moliveira/RepairThemAll/script/../repair_tools/nopol.jar";
	echo "\n\nNode: `hostname`\n";
	echo "\n\nDate: `date`\n";
Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8 -Duser.language=en-US -Duser.country=US -Duser.language=en
10:00:46.656 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Source files: [src/main/java]
10:00:46.663 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Classpath: [file:/users2/cpca56132020/moliveira/folders/Nopol_QUIXBUGS_PASCAL/Nopol_QuixBugs_PASCAL_/target/classes/, file:/users2/cpca56132020/moliveira/folders/Nopol_QUIXBUGS_PASCAL/Nopol_QuixBugs_PASCAL_/target/test-classes/, file:/users2/cpca56132020/moliveira/.m2/repository/junit/junit/4.11/junit-4.11.jar, file:/users2/cpca56132020/moliveira/.m2/repository/org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.jar, file:/users2/cpca56132020/moliveira/RepairThemAll/script/../repair_tools/nopol.jar]
10:00:46.663 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Statement type: PRE_THEN_COND
10:00:46.664 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Args: [java_testcases.junit.PASCAL_Test]
10:00:46.666 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Config: Config{synthesisDepth=3, collectStaticMethods=true, collectStaticFields=false, collectLiterals=false, onlyOneSynthesisResult=true, sortExpressions=true, maxLineInvocationPerTest=250, timeoutMethodInvocation=2000, dataCollectionTimeoutInSecondForSynthesis=900, addWeight=0.19478, subWeight=0.04554, mulWeight=0.0102, divWeight=0.00613, andWeight=0.10597, orWeight=0.05708, eqWeight=0.22798, nEqWeight=0.0, lessEqWeight=0.0255, lessWeight=0.0947, methodCallWeight=0.1, fieldAccessWeight=0.08099, constantWeight=0.14232, variableWeight=0.05195, mode=REPAIR, type=PRE_THEN_COND, synthesis=SMT, oracle=ANGELIC, solver=Z3, solverPath='/users2/cpca56132020/moliveira/RepairThemAll/script/../libs/z3/build/z3', projectSources=[src/main/java], projectClasspath='[Ljava.net.URL;@16c0663d', projectTests=[java_testcases.junit.PASCAL_Test], complianceLevel=8, outputFolder=., json=true}
10:00:46.667 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Available processors (cores): 1
10:00:46.669 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Free memory: 968 MB
10:00:46.670 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Maximum memory: 3 GB
10:00:46.670 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Total memory available to JVM: 989 MB
10:00:46.670 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Java version: 1.8.0_272
10:00:46.676 [main] INFO  fr.inria.lille.repair.nopol.NoPol - JAVA_HOME: /usr/lib/jvm/java-1.8.0-openjdk/bin
10:00:46.676 [main] INFO  fr.inria.lille.repair.nopol.NoPol - PATH: /usr/lib/jvm/java-1.8.0-openjdk/bin:/users2/cpca56132020/moliveira/deps/Maven/apache-maven/bin:/users2/cpca56132020/moliveira/deps/Gradle/gradle-6.8.3/bin:/usr/condabin:/usr/local/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/users2/cpca56132020/moliveira/.local/bin:/users2/cpca56132020/moliveira/bin
10:01:01.412 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #1
10:01:01.415 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation java_programs.PASCAL:36 which is executed by 4 tests
-1942067219
10:01:01.580 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
10:01:02.409 [pool-3-thread-1] DEBUG tests.output - Failing tests with false: 
[test_1(java_testcases.junit.PASCAL_Test): expected:<[[1][,[1,1]]]> but was:<[[1][]]>, test_2(java_testcases.junit.PASCAL_Test): Index: 1, Size: 1, test_3(java_testcases.junit.PASCAL_Test): Index: 1, Size: 1, test_4(java_testcases.junit.PASCAL_Test): Index: 1, Size: 1]
10:01:02.409 [pool-3-thread-1] DEBUG tests.output - Failing tests with true: 
[test_1(java_testcases.junit.PASCAL_Test): expected:<[[1],[1[,1]]]> but was:<[[1],[1[]]]>, test_2(java_testcases.junit.PASCAL_Test): Index: 1, Size: 1, test_3(java_testcases.junit.PASCAL_Test): Index: 1, Size: 1, test_4(java_testcases.junit.PASCAL_Test): Index: 1, Size: 1]
10:01:02.409 [pool-3-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation java_programs.PASCAL:36.
10:01:02.409 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #2
10:01:02.409 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation java_programs.PASCAL:34 which is executed by 4 tests
-1942067219
10:01:02.480 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
10:01:02.736 [pool-13-thread-1] DEBUG tests.output - Failing tests with false: 
[test_1(java_testcases.junit.PASCAL_Test): expected:<[[1],[[1,1]]]> but was:<[[1],[[]]]>, test_2(java_testcases.junit.PASCAL_Test): Index: 0, Size: 0, test_3(java_testcases.junit.PASCAL_Test): Index: 0, Size: 0, test_4(java_testcases.junit.PASCAL_Test): Index: 0, Size: 0]
10:01:02.736 [pool-13-thread-1] DEBUG tests.output - Failing tests with true: 
[test_1(java_testcases.junit.PASCAL_Test): expected:<[[1],[1[,1]]]> but was:<[[1],[1[]]]>, test_2(java_testcases.junit.PASCAL_Test): Index: 1, Size: 1, test_3(java_testcases.junit.PASCAL_Test): Index: 1, Size: 1, test_4(java_testcases.junit.PASCAL_Test): Index: 1, Size: 1]
10:01:02.736 [pool-13-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation java_programs.PASCAL:34.
10:01:02.736 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #3
10:01:02.736 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation java_programs.PASCAL:30 which is executed by 4 tests
-1942067219
10:01:02.810 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
10:01:03.146 [pool-23-thread-1] ERROR x.java.compiler.DynamicClassCompiler - [Compilation errors]
PASCAL.java:40: error: variable upright might not have been initialized
                row.add(upleft + upright);
                                 ^
10:01:03.162 [pool-23-thread-1] ERROR f.i.l.r.n.s.ConstraintModelBuilder - Unable to compile the change: 
public class PASCAL {
    public static java.util.ArrayList<java.util.ArrayList<java.lang.Integer>> pascal(int n) {
        java.util.ArrayList<java.util.ArrayList<java.lang.Integer>> rows = new java.util.ArrayList<java.util.ArrayList<java.lang.Integer>>();
        java.util.ArrayList<java.lang.Integer> init = new java.util.ArrayList<java.lang.Integer>();
        init.add(1);
        rows.add(init);
        for (int r = 1; r < n; r++) {
            java.util.ArrayList<java.lang.Integer> row = new java.util.ArrayList<java.lang.Integer>();
            for (int c = 0; c < r; c++) {
                int upleft;
                int upright;
                if (c > 0) {
                    upleft = rows.get(r - 1).get(c - 1);
                } else {
                    upleft = 0;
                }
                if (c < r) {
                    boolean spoonDefaultValue = false;
                    try {
                        spoonDefaultValue = true;
                    } catch (java.lang.Exception __NopolProcessorException) {
                    }
                    boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                    if (fr.inria.lille.commons.trace.RuntimeValues.instance(2).isEnabled()) {
                        fr.inria.lille.commons.trace.RuntimeValues.instance(2).collectionStarts();
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(2).collectInput("init",init);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(2).collectInput("row",row);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(2).collectInput("rows",rows);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(2).collectInput("n",n);} catch (Exception ex1) {ex1.printStackTrace();};
                        fr.inria.lille.commons.trace.RuntimeValues.instance(2).collectOutput(runtimeAngelicValue);
                        fr.inria.lille.commons.trace.RuntimeValues.instance(2).collectionEnds();
                    }
                    if (runtimeAngelicValue)
                        upright = rows.get(r - 1).get(c);

                } else {
                    upright = 0;
                }
                row.add(upleft + upright);
            }
            rows.add(row);
        }
        return rows;
    }
}
10:01:03.163 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
10:01:03.163 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #4
10:01:03.163 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation java_programs.PASCAL:29 which is executed by 4 tests
-1942067219
10:01:03.225 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
10:01:03.453 [pool-25-thread-1] ERROR x.java.compiler.DynamicClassCompiler - [Compilation errors]
PASCAL.java:41: error: variable upright might not have been initialized
                row.add(upleft + upright);
                                 ^
10:01:03.460 [pool-25-thread-1] ERROR f.i.l.r.n.s.ConstraintModelBuilder - Unable to compile the change: 
public class PASCAL {
    public static java.util.ArrayList<java.util.ArrayList<java.lang.Integer>> pascal(int n) {
        java.util.ArrayList<java.util.ArrayList<java.lang.Integer>> rows = new java.util.ArrayList<java.util.ArrayList<java.lang.Integer>>();
        java.util.ArrayList<java.lang.Integer> init = new java.util.ArrayList<java.lang.Integer>();
        init.add(1);
        rows.add(init);
        for (int r = 1; r < n; r++) {
            java.util.ArrayList<java.lang.Integer> row = new java.util.ArrayList<java.lang.Integer>();
            for (int c = 0; c < r; c++) {
                int upleft;
                int upright;
                if (c > 0) {
                    upleft = rows.get(r - 1).get(c - 1);
                } else {
                    upleft = 0;
                }
                boolean spoonDefaultValue = false;
                try {
                    spoonDefaultValue = true;
                } catch (java.lang.Exception __NopolProcessorException) {
                }
                boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                if (fr.inria.lille.commons.trace.RuntimeValues.instance(3).isEnabled()) {
                    fr.inria.lille.commons.trace.RuntimeValues.instance(3).collectionStarts();
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(3).collectInput("init",init);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(3).collectInput("r",r);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(3).collectInput("c < r",c < r);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(3).collectInput("c",c);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(3).collectInput("row",row);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(3).collectInput("rows",rows);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(3).collectInput("n",n);} catch (Exception ex1) {ex1.printStackTrace();};
                    fr.inria.lille.commons.trace.RuntimeValues.instance(3).collectOutput(runtimeAngelicValue);
                    fr.inria.lille.commons.trace.RuntimeValues.instance(3).collectionEnds();
                }
                if (runtimeAngelicValue) if (c < r) {
                    upright = rows.get(r - 1).get(c);
                } else {
                    upright = 0;
                }
                row.add(upleft + upright);
            }
            rows.add(row);
        }
        return rows;
    }
}
10:01:03.460 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
10:01:03.460 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
10:01:03.698 [pool-27-thread-1] DEBUG tests.output - Failing tests with false: 
[test_1(java_testcases.junit.PASCAL_Test): expected:<[[1],[[1,1]]]> but was:<[[1],[[0]]]>, test_2(java_testcases.junit.PASCAL_Test): expected:<[[1],[[1,1],[1,2,1]]]> but was:<[[1],[[0],[0,0]]]>, test_3(java_testcases.junit.PASCAL_Test): expected:<[[1],[[1,1],[1,2,1],[1,3,3,1]]]> but was:<[[1],[[0],[0,0],[0,0,0]]]>, test_4(java_testcases.junit.PASCAL_Test): expected:<[[1],[[1,1],[1,2,1],[1,3,3,1],[1,4,6,4,1]]]> but was:<[[1],[[0],[0,0],[0,0,0],[0,0,0,0]]]>]
10:01:03.698 [pool-27-thread-1] DEBUG tests.output - Failing tests with true: 
[test_1(java_testcases.junit.PASCAL_Test): expected:<[[1],[1[,1]]]> but was:<[[1],[1[]]]>, test_2(java_testcases.junit.PASCAL_Test): Index: 1, Size: 1, test_3(java_testcases.junit.PASCAL_Test): Index: 1, Size: 1, test_4(java_testcases.junit.PASCAL_Test): Index: 1, Size: 1]
10:01:03.698 [pool-27-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation java_programs.PASCAL:29.
10:01:03.698 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #5
10:01:03.699 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation java_programs.PASCAL:27 which is executed by 4 tests
-1942067219
10:01:03.773 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
10:01:03.965 [pool-37-thread-1] ERROR x.java.compiler.DynamicClassCompiler - [Compilation errors]
PASCAL.java:40: error: variable upleft might not have been initialized
                row.add(upleft + upright);
                        ^
10:01:03.969 [pool-37-thread-1] ERROR f.i.l.r.n.s.ConstraintModelBuilder - Unable to compile the change: 
public class PASCAL {
    public static java.util.ArrayList<java.util.ArrayList<java.lang.Integer>> pascal(int n) {
        java.util.ArrayList<java.util.ArrayList<java.lang.Integer>> rows = new java.util.ArrayList<java.util.ArrayList<java.lang.Integer>>();
        java.util.ArrayList<java.lang.Integer> init = new java.util.ArrayList<java.lang.Integer>();
        init.add(1);
        rows.add(init);
        for (int r = 1; r < n; r++) {
            java.util.ArrayList<java.lang.Integer> row = new java.util.ArrayList<java.lang.Integer>();
            for (int c = 0; c < r; c++) {
                int upleft;
                int upright;
                if (c > 0) {
                    upleft = rows.get(r - 1).get(c - 1);
                } else {
                    boolean spoonDefaultValue = false;
                    try {
                        spoonDefaultValue = true;
                    } catch (java.lang.Exception __NopolProcessorException) {
                    }
                    boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                    if (fr.inria.lille.commons.trace.RuntimeValues.instance(5).isEnabled()) {
                        fr.inria.lille.commons.trace.RuntimeValues.instance(5).collectionStarts();
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(5).collectInput("init",init);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(5).collectInput("row",row);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(5).collectInput("rows",rows);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(5).collectInput("n",n);} catch (Exception ex1) {ex1.printStackTrace();};
                        fr.inria.lille.commons.trace.RuntimeValues.instance(5).collectOutput(runtimeAngelicValue);
                        fr.inria.lille.commons.trace.RuntimeValues.instance(5).collectionEnds();
                    }
                    if (runtimeAngelicValue)
                        upleft = 0;

                }
                if (c < r) {
                    upright = rows.get(r - 1).get(c);
                } else {
                    upright = 0;
                }
                row.add(upleft + upright);
            }
            rows.add(row);
        }
        return rows;
    }
}
10:01:03.976 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
10:01:03.976 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #6
10:01:03.977 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation java_programs.PASCAL:24 which is executed by 4 tests
-1942067219
10:01:04.040 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
10:01:04.209 [pool-39-thread-1] ERROR x.java.compiler.DynamicClassCompiler - [Compilation errors]
PASCAL.java:41: error: variable upleft might not have been initialized
                row.add(upleft + upright);
                        ^
10:01:04.221 [pool-39-thread-1] ERROR f.i.l.r.n.s.ConstraintModelBuilder - Unable to compile the change: 
public class PASCAL {
    public static java.util.ArrayList<java.util.ArrayList<java.lang.Integer>> pascal(int n) {
        java.util.ArrayList<java.util.ArrayList<java.lang.Integer>> rows = new java.util.ArrayList<java.util.ArrayList<java.lang.Integer>>();
        java.util.ArrayList<java.lang.Integer> init = new java.util.ArrayList<java.lang.Integer>();
        init.add(1);
        rows.add(init);
        for (int r = 1; r < n; r++) {
            java.util.ArrayList<java.lang.Integer> row = new java.util.ArrayList<java.lang.Integer>();
            for (int c = 0; c < r; c++) {
                int upleft;
                int upright;
                boolean spoonDefaultValue = false;
                try {
                    spoonDefaultValue = true;
                } catch (java.lang.Exception __NopolProcessorException) {
                }
                boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                if (fr.inria.lille.commons.trace.RuntimeValues.instance(6).isEnabled()) {
                    fr.inria.lille.commons.trace.RuntimeValues.instance(6).collectionStarts();
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(6).collectInput("0",0);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(6).collectInput("init",init);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(6).collectInput("c > 0",c > 0);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(6).collectInput("c",c);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(6).collectInput("row",row);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(6).collectInput("rows",rows);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(6).collectInput("n",n);} catch (Exception ex1) {ex1.printStackTrace();};
                    fr.inria.lille.commons.trace.RuntimeValues.instance(6).collectOutput(runtimeAngelicValue);
                    fr.inria.lille.commons.trace.RuntimeValues.instance(6).collectionEnds();
                }
                if (runtimeAngelicValue) if (c > 0) {
                    upleft = rows.get(r - 1).get(c - 1);
                } else {
                    upleft = 0;
                }
                if (c < r) {
                    upright = rows.get(r - 1).get(c);
                } else {
                    upright = 0;
                }
                row.add(upleft + upright);
            }
            rows.add(row);
        }
        return rows;
    }
}
10:01:04.221 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
10:01:04.221 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
10:01:04.602 [pool-41-thread-1] DEBUG tests.output - Failing tests with false: 
[test_1(java_testcases.junit.PASCAL_Test): expected:<[[1],[1[,1]]]> but was:<[[1],[1[]]]>, test_2(java_testcases.junit.PASCAL_Test): Index: 1, Size: 1, test_3(java_testcases.junit.PASCAL_Test): Index: 1, Size: 1, test_4(java_testcases.junit.PASCAL_Test): Index: 1, Size: 1]
10:01:04.603 [pool-41-thread-1] DEBUG tests.output - Failing tests with true: 
[test_1(java_testcases.junit.PASCAL_Test): -1, test_2(java_testcases.junit.PASCAL_Test): -1, test_3(java_testcases.junit.PASCAL_Test): -1, test_4(java_testcases.junit.PASCAL_Test): -1]
10:01:04.603 [pool-41-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation java_programs.PASCAL:24.
10:01:04.603 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #7
10:01:04.603 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation java_programs.PASCAL:22 which is executed by 4 tests
-1942067219
10:01:04.668 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
10:01:04.903 [pool-51-thread-1] DEBUG tests.output - Failing tests with false: 
[test_1(java_testcases.junit.PASCAL_Test): expected:<[[1],[[1,1]]]> but was:<[[1],[[]]]>, test_2(java_testcases.junit.PASCAL_Test): expected:<[[1],[[1,1],[1,2,1]]]> but was:<[[1],[[],[]]]>, test_3(java_testcases.junit.PASCAL_Test): expected:<[[1],[[1,1],[1,2,1],[1,3,3,1]]]> but was:<[[1],[[],[],[]]]>, test_4(java_testcases.junit.PASCAL_Test): expected:<[[1],[[1,1],[1,2,1],[1,3,3,1],[1,4,6,4,1]]]> but was:<[[1],[[],[],[],[]]]>]
10:01:04.903 [pool-51-thread-1] DEBUG tests.output - Failing tests with true: 
[test_1(java_testcases.junit.PASCAL_Test): expected:<[[1],[1[,1]]]> but was:<[[1],[1[]]]>, test_2(java_testcases.junit.PASCAL_Test): Index: 1, Size: 1, test_3(java_testcases.junit.PASCAL_Test): Index: 1, Size: 1, test_4(java_testcases.junit.PASCAL_Test): Index: 1, Size: 1]
10:01:04.903 [pool-51-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation java_programs.PASCAL:22.
10:01:04.904 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #8
10:01:04.904 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation java_programs.PASCAL:21 which is executed by 4 tests
-1942067219
10:01:04.955 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #9
10:01:04.956 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation java_programs.PASCAL:20 which is executed by 5 tests
-1942067219
10:01:05.015 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
10:01:05.433 [pool-61-thread-1] DEBUG tests.output - Failing tests with false: 
[test_1(java_testcases.junit.PASCAL_Test): expected:<[[1][,[1,1]]]> but was:<[[1][]]>, test_2(java_testcases.junit.PASCAL_Test): expected:<[[1][,[1,1],[1,2,1]]]> but was:<[[1][]]>, test_3(java_testcases.junit.PASCAL_Test): expected:<[[1][,[1,1],[1,2,1],[1,3,3,1]]]> but was:<[[1][]]>, test_4(java_testcases.junit.PASCAL_Test): expected:<[[1][,[1,1],[1,2,1],[1,3,3,1],[1,4,6,4,1]]]> but was:<[[1][]]>]
10:01:05.433 [pool-61-thread-1] DEBUG tests.output - Failing tests with true: 
[test_1(java_testcases.junit.PASCAL_Test): expected:<[[1],[1[,1]]]> but was:<[[1],[1[]]]>, test_2(java_testcases.junit.PASCAL_Test): Index: 1, Size: 1, test_3(java_testcases.junit.PASCAL_Test): Index: 1, Size: 1, test_4(java_testcases.junit.PASCAL_Test): Index: 1, Size: 1]
10:01:05.433 [pool-61-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation java_programs.PASCAL:20.
10:01:05.433 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #10
10:01:05.433 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation java_programs.PASCAL:18 which is executed by 5 tests
-1942067219
10:01:05.484 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
10:01:05.750 [pool-71-thread-1] DEBUG tests.output - Failing tests with false: 
[test_1(java_testcases.junit.PASCAL_Test): Index: 0, Size: 0, test_2(java_testcases.junit.PASCAL_Test): Index: 0, Size: 0, test_3(java_testcases.junit.PASCAL_Test): Index: 0, Size: 0, test_4(java_testcases.junit.PASCAL_Test): Index: 0, Size: 0]
10:01:05.750 [pool-71-thread-1] DEBUG tests.output - Failing tests with true: 
[test_1(java_testcases.junit.PASCAL_Test): expected:<[[1],[1[,1]]]> but was:<[[1],[1[]]]>, test_2(java_testcases.junit.PASCAL_Test): Index: 1, Size: 1, test_3(java_testcases.junit.PASCAL_Test): Index: 1, Size: 1, test_4(java_testcases.junit.PASCAL_Test): Index: 1, Size: 1]
10:01:05.750 [pool-71-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation java_programs.PASCAL:18.
10:01:05.751 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #11
10:01:05.751 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation java_programs.PASCAL:17 which is executed by 5 tests
-1942067219
10:01:05.795 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
10:01:05.985 [pool-81-thread-1] DEBUG tests.output - Failing tests with false: 
[test_1(java_testcases.junit.PASCAL_Test): Index: 0, Size: 0, test_2(java_testcases.junit.PASCAL_Test): Index: 0, Size: 0, test_3(java_testcases.junit.PASCAL_Test): Index: 0, Size: 0, test_4(java_testcases.junit.PASCAL_Test): Index: 0, Size: 0]
10:01:05.986 [pool-81-thread-1] DEBUG tests.output - Failing tests with true: 
[test_1(java_testcases.junit.PASCAL_Test): expected:<[[1],[1[,1]]]> but was:<[[1],[1[]]]>, test_2(java_testcases.junit.PASCAL_Test): Index: 1, Size: 1, test_3(java_testcases.junit.PASCAL_Test): Index: 1, Size: 1, test_4(java_testcases.junit.PASCAL_Test): Index: 1, Size: 1]
10:01:05.986 [pool-81-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation java_programs.PASCAL:17.
10:01:05.987 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #12
10:01:05.987 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation java_programs.PASCAL:16 which is executed by 5 tests
-1942067219
10:01:06.046 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #13
10:01:06.046 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation java_programs.PASCAL:15 which is executed by 5 tests
-1942067219
10:01:06.112 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #14
10:01:06.113 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation java_programs.PASCAL:25 which is executed by 3 tests
-1942067219
10:01:06.157 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
10:01:06.296 [pool-91-thread-1] ERROR x.java.compiler.DynamicClassCompiler - [Compilation errors]
PASCAL.java:40: error: variable upleft might not have been initialized
                row.add(upleft + upright);
                        ^
10:01:06.298 [pool-91-thread-1] ERROR f.i.l.r.n.s.ConstraintModelBuilder - Unable to compile the change: 
public class PASCAL {
    public static java.util.ArrayList<java.util.ArrayList<java.lang.Integer>> pascal(int n) {
        java.util.ArrayList<java.util.ArrayList<java.lang.Integer>> rows = new java.util.ArrayList<java.util.ArrayList<java.lang.Integer>>();
        java.util.ArrayList<java.lang.Integer> init = new java.util.ArrayList<java.lang.Integer>();
        init.add(1);
        rows.add(init);
        for (int r = 1; r < n; r++) {
            java.util.ArrayList<java.lang.Integer> row = new java.util.ArrayList<java.lang.Integer>();
            for (int c = 0; c < r; c++) {
                int upleft;
                int upright;
                if (c > 0) {
                    boolean spoonDefaultValue = false;
                    try {
                        spoonDefaultValue = true;
                    } catch (java.lang.Exception __NopolProcessorException) {
                    }
                    boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                    if (fr.inria.lille.commons.trace.RuntimeValues.instance(12).isEnabled()) {
                        fr.inria.lille.commons.trace.RuntimeValues.instance(12).collectionStarts();
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(12).collectInput("init",init);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(12).collectInput("row",row);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(12).collectInput("rows",rows);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(12).collectInput("n",n);} catch (Exception ex1) {ex1.printStackTrace();};
                        fr.inria.lille.commons.trace.RuntimeValues.instance(12).collectOutput(runtimeAngelicValue);
                        fr.inria.lille.commons.trace.RuntimeValues.instance(12).collectionEnds();
                    }
                    if (runtimeAngelicValue)
                        upleft = rows.get(r - 1).get(c - 1);

                } else {
                    upleft = 0;
                }
                if (c < r) {
                    upright = rows.get(r - 1).get(c);
                } else {
                    upright = 0;
                }
                row.add(upleft + upright);
            }
            rows.add(row);
        }
        return rows;
    }
}
10:01:06.311 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
10:01:06.311 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #15
10:01:06.311 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation java_testcases.junit.QuixFixOracleHelper:44 which is executed by 2 tests
10:01:06.312 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - cannot spoon SourceLocation java_testcases.junit.QuixFixOracleHelper:44
10:01:06.312 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #16
10:01:06.312 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation java_testcases.junit.QuixFixOracleHelper:41 which is executed by 2 tests
10:01:06.312 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - cannot spoon SourceLocation java_testcases.junit.QuixFixOracleHelper:41
10:01:06.312 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #17
10:01:06.312 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation java_testcases.junit.QuixFixOracleHelper:38 which is executed by 2 tests
10:01:06.312 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - cannot spoon SourceLocation java_testcases.junit.QuixFixOracleHelper:38
10:01:06.312 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #18
10:01:06.312 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation java_testcases.junit.QuixFixOracleHelper:37 which is executed by 2 tests
10:01:06.312 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - cannot spoon SourceLocation java_testcases.junit.QuixFixOracleHelper:37
10:01:06.312 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #19
10:01:06.312 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation java_testcases.junit.QuixFixOracleHelper:35 which is executed by 2 tests
10:01:06.312 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - cannot spoon SourceLocation java_testcases.junit.QuixFixOracleHelper:35
10:01:06.312 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #20
10:01:06.312 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation java_testcases.junit.QuixFixOracleHelper:32 which is executed by 2 tests
10:01:06.312 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - cannot spoon SourceLocation java_testcases.junit.QuixFixOracleHelper:32
10:01:06.312 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #21
10:01:06.312 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation java_testcases.junit.QuixFixOracleHelper:31 which is executed by 2 tests
10:01:06.312 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - cannot spoon SourceLocation java_testcases.junit.QuixFixOracleHelper:31
10:01:06.312 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #22
10:01:06.312 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation java_testcases.junit.QuixFixOracleHelper:30 which is executed by 2 tests
10:01:06.312 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - cannot spoon SourceLocation java_testcases.junit.QuixFixOracleHelper:30
10:01:06.312 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #23
10:01:06.312 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation java_testcases.junit.QuixFixOracleHelper:29 which is executed by 2 tests
10:01:06.312 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - cannot spoon SourceLocation java_testcases.junit.QuixFixOracleHelper:29
10:01:06.312 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #24
10:01:06.313 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation java_testcases.junit.QuixFixOracleHelper:28 which is executed by 2 tests
10:01:06.313 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - cannot spoon SourceLocation java_testcases.junit.QuixFixOracleHelper:28
10:01:06.313 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #25
10:01:06.313 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation java_testcases.junit.QuixFixOracleHelper:27 which is executed by 2 tests
10:01:06.313 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - cannot spoon SourceLocation java_testcases.junit.QuixFixOracleHelper:27
10:01:06.313 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #26
10:01:06.313 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation java_testcases.junit.QuixFixOracleHelper:26 which is executed by 2 tests
10:01:06.313 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - cannot spoon SourceLocation java_testcases.junit.QuixFixOracleHelper:26
10:01:06.313 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #27
10:01:06.313 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation java_testcases.junit.QuixFixOracleHelper:22 which is executed by 2 tests
10:01:06.313 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - cannot spoon SourceLocation java_testcases.junit.QuixFixOracleHelper:22
10:01:06.313 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #28
10:01:06.313 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation java_testcases.junit.QuixFixOracleHelper:21 which is executed by 2 tests
10:01:06.313 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - cannot spoon SourceLocation java_testcases.junit.QuixFixOracleHelper:21
10:01:06.313 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #29
10:01:06.313 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation java_testcases.junit.QuixFixOracleHelper:16 which is executed by 2 tests
10:01:06.313 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - cannot spoon SourceLocation java_testcases.junit.QuixFixOracleHelper:16
10:01:06.313 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #30
10:01:06.313 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation java_testcases.junit.QuixFixOracleHelper:15 which is executed by 2 tests
10:01:06.313 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - cannot spoon SourceLocation java_testcases.junit.QuixFixOracleHelper:15
10:01:06.313 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #31
10:01:06.313 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation java_testcases.junit.QuixFixOracleHelper:14 which is executed by 2 tests
10:01:06.313 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - cannot spoon SourceLocation java_testcases.junit.QuixFixOracleHelper:14
10:01:06.313 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #32
10:01:06.313 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation java_programs.PASCAL:39 which is executed by 2 tests
-1942067219
10:01:06.378 [pool-2-thread-1] INFO  fr.inria.lille.repair.nopol.NoPol - ----INFORMATION----
10:01:06.381 [pool-2-thread-1] INFO  fr.inria.lille.repair.nopol.NoPol - Nb classes : 3
10:01:06.381 [pool-2-thread-1] INFO  fr.inria.lille.repair.nopol.NoPol - Nb methods : 9
10:01:06.381 [pool-2-thread-1] INFO  fr.inria.lille.repair.nopol.NoPol - Nb Statements Analyzed : 13
10:01:06.381 [pool-2-thread-1] INFO  fr.inria.lille.repair.nopol.NoPol - Nb Statements with Angelic Value Found : 0
10:01:06.381 [pool-2-thread-1] INFO  fr.inria.lille.repair.nopol.NoPol - Nb inputs in SMT : 0
10:01:06.382 [pool-2-thread-1] INFO  fr.inria.lille.repair.nopol.NoPol - Nb SMT level: 0
10:01:06.382 [pool-2-thread-1] INFO  fr.inria.lille.repair.nopol.NoPol - Nb variables in SMT : 0
10:01:06.382 [pool-2-thread-1] INFO  fr.inria.lille.repair.nopol.NoPol - NoPol Execution time : 19723ms
10:01:06.382 [pool-2-thread-1] INFO  fr.inria.lille.repair.nopol.NoPol - 
NO_ANGELIC_VALUE

real	0m20.444s
user	0m7.815s
sys	0m11.836s
\n\nNode: hpc060.ncg.ingrid.pt\n
\n\nDate: Sat Apr  3 10:01:06 EDT 2021\n
