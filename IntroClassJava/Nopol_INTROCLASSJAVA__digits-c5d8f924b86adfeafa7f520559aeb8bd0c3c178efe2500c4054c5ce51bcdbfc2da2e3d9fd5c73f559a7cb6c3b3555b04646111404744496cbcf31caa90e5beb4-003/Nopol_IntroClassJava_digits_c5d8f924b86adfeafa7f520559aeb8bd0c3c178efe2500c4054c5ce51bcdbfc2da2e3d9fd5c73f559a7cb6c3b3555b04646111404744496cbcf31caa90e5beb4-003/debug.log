15:59:51.723 fr.inria.lille.repair.nopol.NoPol - Source files: [src/main/java]
15:59:51.726 fr.inria.lille.repair.nopol.NoPol - Classpath: [file:/users2/cpca56132020/moliveira/folders/Nopol_INTROCLASSJAVA__digits-c5d8f924b86adfeafa7f520559aeb8bd0c3c178efe2500c4054c5ce51bcdbfc2da2e3d9fd5c73f559a7cb6c3b3555b04646111404744496cbcf31caa90e5beb4-003/Nopol_IntroClassJava_digits_c5d8f924b86adfeafa7f520559aeb8bd0c3c178efe2500c4054c5ce51bcdbfc2da2e3d9fd5c73f559a7cb6c3b3555b04646111404744496cbcf31caa90e5beb4-003/target/classes/, file:/users2/cpca56132020/moliveira/folders/Nopol_INTROCLASSJAVA__digits-c5d8f924b86adfeafa7f520559aeb8bd0c3c178efe2500c4054c5ce51bcdbfc2da2e3d9fd5c73f559a7cb6c3b3555b04646111404744496cbcf31caa90e5beb4-003/Nopol_IntroClassJava_digits_c5d8f924b86adfeafa7f520559aeb8bd0c3c178efe2500c4054c5ce51bcdbfc2da2e3d9fd5c73f559a7cb6c3b3555b04646111404744496cbcf31caa90e5beb4-003/target/test-classes/, file:/users2/cpca56132020/moliveira/.m2/repository/junit/junit/4.11/junit-4.11.jar, file:/users2/cpca56132020/moliveira/.m2/repository/org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.jar, file:/users2/cpca56132020/moliveira/RepairThemAll/script/../repair_tools/nopol.jar]
15:59:51.726 fr.inria.lille.repair.nopol.NoPol - Statement type: PRE_THEN_COND
15:59:51.726 fr.inria.lille.repair.nopol.NoPol - Args: [introclassJava.digits_c5d8f924_003BlackboxTest, introclassJava.digits_c5d8f924_003WhiteboxTest]
15:59:51.728 fr.inria.lille.repair.nopol.NoPol - Config: Config{synthesisDepth=3, collectStaticMethods=true, collectStaticFields=false, collectLiterals=false, onlyOneSynthesisResult=true, sortExpressions=true, maxLineInvocationPerTest=250, timeoutMethodInvocation=2000, dataCollectionTimeoutInSecondForSynthesis=900, addWeight=0.19478, subWeight=0.04554, mulWeight=0.0102, divWeight=0.00613, andWeight=0.10597, orWeight=0.05708, eqWeight=0.22798, nEqWeight=0.0, lessEqWeight=0.0255, lessWeight=0.0947, methodCallWeight=0.1, fieldAccessWeight=0.08099, constantWeight=0.14232, variableWeight=0.05195, mode=REPAIR, type=PRE_THEN_COND, synthesis=SMT, oracle=ANGELIC, solver=Z3, solverPath='/users2/cpca56132020/moliveira/RepairThemAll/script/../libs/z3/build/z3', projectSources=[src/main/java], projectClasspath='[Ljava.net.URL;@16c0663d', projectTests=[introclassJava.digits_c5d8f924_003BlackboxTest, introclassJava.digits_c5d8f924_003WhiteboxTest], complianceLevel=7, outputFolder=., json=true}
15:59:51.729 fr.inria.lille.repair.nopol.NoPol - Available processors (cores): 1
15:59:51.731 fr.inria.lille.repair.nopol.NoPol - Free memory: 968 MB
15:59:51.731 fr.inria.lille.repair.nopol.NoPol - Maximum memory: 3 GB
15:59:51.732 fr.inria.lille.repair.nopol.NoPol - Total memory available to JVM: 989 MB
15:59:51.732 fr.inria.lille.repair.nopol.NoPol - Java version: 1.8.0_272
15:59:51.735 fr.inria.lille.repair.nopol.NoPol - JAVA_HOME: /usr/lib/jvm/java-1.8.0-openjdk/bin
15:59:51.735 fr.inria.lille.repair.nopol.NoPol - PATH: /usr/lib/jvm/java-1.8.0-openjdk/bin:/users2/cpca56132020/moliveira/deps/Maven/apache-maven/bin:/users2/cpca56132020/moliveira/deps/Gradle/gradle-6.8.3/bin:/usr/condabin:/usr/local/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/users2/cpca56132020/moliveira/.local/bin:/users2/cpca56132020/moliveira/bin
15:59:54.943 fr.inria.lille.repair.nopol.NoPol - statement #1
15:59:54.948 fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation introclassJava.digits_c5d8f924_003:83 which is executed by 16 tests
15:59:55.240 fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
15:59:56.265 tests.output - Failing tests with false: 
[test10(introclassJava.digits_c5d8f924_003WhiteboxTest): expected:<...raninteger>266865500[1That'sall,haveaniceday!]> but was:<...raninteger>266865500[]>]
15:59:56.265 tests.output - Failing tests with true: 
[test10(introclassJava.digits_c5d8f924_003WhiteboxTest): expected:<...raninteger>266865500[1That'sall,haveaniceday!]> but was:<...raninteger>266865500[]>]
15:59:56.265 f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation introclassJava.digits_c5d8f924_003:83.
15:59:56.265 fr.inria.lille.repair.nopol.NoPol - statement #2
15:59:56.265 fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation introclassJava.digits_c5d8f924_003:77 which is executed by 16 tests
15:59:56.353 fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
15:59:56.654 tests.output - Failing tests with false: 
[test10(introclassJava.digits_c5d8f924_003WhiteboxTest): expected:<...raninteger>266865500[1That'sall,haveaniceday!]> but was:<...raninteger>266865500[]>]
15:59:56.654 tests.output - Failing tests with true: 
[test10(introclassJava.digits_c5d8f924_003WhiteboxTest): expected:<...raninteger>266865500[1That'sall,haveaniceday!]> but was:<...raninteger>266865500[]>]
15:59:56.654 f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation introclassJava.digits_c5d8f924_003:77.
15:59:56.654 fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
15:59:57.003 tests.output - Failing tests with false: 
[test10(introclassJava.digits_c5d8f924_003WhiteboxTest): expected:<...raninteger>266865500[1That'sall,haveaniceday!]> but was:<...raninteger>266865500[]>]
15:59:57.003 tests.output - Failing tests with true: 
[test10(introclassJava.digits_c5d8f924_003WhiteboxTest): expected:<Enteraninteger>2[668655001]That'sall,haveaniced...> but was:<Enteraninteger>2[]That'sall,haveaniced...>]
15:59:57.003 f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation introclassJava.digits_c5d8f924_003:77.
15:59:57.003 fr.inria.lille.repair.nopol.NoPol - statement #3
15:59:57.003 fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation introclassJava.digits_c5d8f924_003:76 which is executed by 16 tests
15:59:57.101 fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
15:59:57.739 f.i.l.c.s.ConstraintBasedSynthesis - Operators:
15:59:57.870 f.i.l.c.s.ConstraintBasedSynthesis - Successful code synthesis: introclassJava.digits_c5d8f924_003.this.scanner.hasNext()
15:59:57.871 f.i.l.repair.nopol.patch.TestPatch - Applying patch: introclassJava.digits_c5d8f924_003:76: PRECONDITION introclassJava.digits_c5d8f924_003.this.scanner.hasNext()
15:59:58.038 f.i.l.repair.nopol.patch.TestPatch - Running test suite to check the patch "introclassJava.digits_c5d8f924_003.this.scanner.hasNext()" is working
15:59:58.241 fr.inria.lille.repair.nopol.NoPol - Skipped -9 patches for sake of performance
15:59:58.241 fr.inria.lille.repair.nopol.NoPol - ----INFORMATION----
15:59:58.249 fr.inria.lille.repair.nopol.NoPol - Nb classes : 6
15:59:58.249 fr.inria.lille.repair.nopol.NoPol - Nb methods : 2
15:59:58.250 fr.inria.lille.repair.nopol.NoPol - Nb Statements Analyzed : 4
15:59:58.250 fr.inria.lille.repair.nopol.NoPol - Nb Statements with Angelic Value Found : 1
15:59:58.250 fr.inria.lille.repair.nopol.NoPol - Nb inputs in SMT : 10
15:59:58.250 fr.inria.lille.repair.nopol.NoPol - Nb SMT level: 1
15:59:58.250 fr.inria.lille.repair.nopol.NoPol - Nb SMT components: [0] []
15:59:58.250 fr.inria.lille.repair.nopol.NoPol - Nb variables in SMT : 15
15:59:58.250 fr.inria.lille.repair.nopol.NoPol - NoPol Execution time : 6519ms
15:59:58.250 fr.inria.lille.repair.nopol.NoPol - 
15:59:58.250 fr.inria.lille.repair.nopol.NoPol - ----PATCH FOUND----
15:59:58.250 fr.inria.lille.repair.nopol.NoPol - introclassJava.digits_c5d8f924_003.this.scanner.hasNext()
15:59:58.250 fr.inria.lille.repair.nopol.NoPol - Nb test that executes the patch: 16
15:59:58.251 fr.inria.lille.repair.nopol.NoPol - introclassJava.digits_c5d8f924_003:76: PRECONDITION
15:59:58.280 fr.inria.lille.repair.nopol.NoPol - --- a/src/main/java/introclassJava/digits_c5d8f924_003.java
+++ b/src/main/java/introclassJava/digits_c5d8f924_003.java
@@ -75,3 +75,5 @@
             number.value = number.value / 10;
-            i.value++;
+            if (introclassJava.digits_c5d8f924_003.this.scanner.hasNext()) {
+                i.value++;
+            }
             if (number.value == 0) {

