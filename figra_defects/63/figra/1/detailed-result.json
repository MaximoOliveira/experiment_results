{"general":{"NR_RIGHT_COMPILATIONS":9,"NR_ERRONEOUS_VARIANCES":null,"EXECUTION_IDENTIFIER":"Math-63","OUTPUT_STATUS":"STOP_BY_PATCH_FOUND","NR_FAILLING_COMPILATIONS":null,"NR_GENERATIONS":9,"TOTAL_TIME":108.64,"NR_FAILING_VALIDATION_PROCESS":null},"patches":[{"VARIANT_ID":"18","VALIDATION":"|true|0|2282|[]|","patchhunks":[{"LOCATION":"org.apache.commons.math.util.MathUtils","PATH":"\\\/tmp\\\/figra_Defects4J_Math_63\\\/src\\\/main\\\/java\\\/org\\\/apache\\\/commons\\\/math\\\/util\\\/MathUtils.java","INGREDIENT_SCOPE":"-","SUSPICIOUNESS":"1","INGREDIENT_PARENT":"_double_0 > 0.0","PATCH_HUNK_TYPE":"CtBinaryOperatorImpl|CtBinaryOperatorImpl","ORIGINAL_CODE":"java.lang.Double.isNaN(x)","BUGGY_CODE_TYPE":"CtInvocationImpl|CtBinaryOperatorImpl","OPERATOR":"ExpressionReplaceOperator","MODIFIED_FILE_PATH":"\\\/tmp\\\/figra_Defects4J_Math_63\\\/.\\\/output_astor\\\/AstorMain-Math-63\\\/\\\/src\\\/\\\/variant-18\\\/org\\\/apache\\\/commons\\\/math\\\/util\\\/MathUtils.java","LINE":"417","MP_RANKING":"1","PATCH_HUNK_CODE":"(x > 0.0)"}],"TIME":"108","GENERATION":"9","FOLDER_SOLUTION_CODE":"\\\/tmp\\\/figra_Defects4J_Math_63\\\/.\\\/output_astor\\\/AstorMain-Math-63\\\/\\\/src\\\/\\\/variant-18","PATCH_DIFF_ORIG":"--- \\\/tmp\\\/figra_Defects4J_Math_63\\\/src\\\/main\\\/java\\\/org\\\/apache\\\/commons\\\/math\\\/util\\\/MathUtilsjava\\n+++ \\\/tmp\\\/figra_Defects4J_Math_63\\\/src\\\/main\\\/java\\\/org\\\/apache\\\/commons\\\/math\\\/util\\\/MathUtilsjava\\n@@ -417,2 +417 @@\\n-\\t\\treturn (java.lang.Double.isNaN(x) && java.lang.Double.isNaN(y)) || (x == y);\\n-\\t}\\n+\\t\\treturn (\\n@@ -428,3 +426,0 @@\\n-\\tpublic static boolean equalsIncludingNaN(double x, double y) {\\n-\\t\\treturn (java.lang.Double.isNaN(x) && java.lang.Double.isNaN(y)) || org.apache.commons.math.util.MathUtils.equals(x, y, 1);\\n-\\t}\\n@@ -441,3 +436,0 @@\\n-\\tpublic static boolean equals(double x, double y, double eps) {\\n-\\t\\treturn org.apache.commons.math.util.MathUtils.equals(x, y, 1) || (org.apache.commons.math.util.FastMath.abs(y - x) <= eps);\\n-\\t}\\n@@ -455,3 +447,0 @@\\n-\\tpublic static boolean equalsIncludingNaN(double x, double y, double eps) {\\n-\\t\\treturn org.apache.commons.math.util.MathUtils.equalsIncludingNaN(x, y) || (org.apache.commons.math.util.FastMath.abs(y - x) <= eps);\\n-\\t}\\n@@ -476 +465,0 @@\\n-\\tpublic static boolean equals(double x, double y, int maxUlps) {\\n@@ -479 +467,0 @@\\n-\\t\\tassert (maxUlps > 0) && (maxUlps < org.apache.commons.math.util.MathUtils.NAN_GAP);\\n@@ -481,2 +468,0 @@\\n-\\t\\tlong xInt = java.lang.Double.doubleToLongBits(x);\\n-\\t\\tlong yInt = java.lang.Double.doubleToLongBits(y);\\n@@ -485,6 +470,0 @@\\n-\\t\\tif (xInt < 0) {\\n-\\t\\t\\txInt = org.apache.commons.math.util.MathUtils.SGN_MASK - xInt;\\n-\\t\\t}\\n-\\t\\tif (yInt < 0) {\\n-\\t\\t\\tyInt = org.apache.commons.math.util.MathUtils.SGN_MASK - yInt;\\n-\\t\\t}\\n@@ -492 +471,0 @@\\n-\\t\\tfinal boolean isEqual = org.apache.commons.math.util.FastMath.abs(xInt - yInt) <= maxUlps;\\n@@ -494,2 +472,0 @@\\n-\\t\\treturn (isEqual && (!java.lang.Double.isNaN(x))) && (!java.lang.Double.isNaN(y));\\n-\\t}\\n@@ -508,3 +484,0 @@\\n-\\tpublic static boolean equalsIncludingNaN(double x, double y, int maxUlps) {\\n-\\t\\treturn (java.lang.Double.isNaN(x) && java.lang.Double.isNaN(y)) || org.apache.commons.math.util.MathUtils.equals(x, y, maxUlps);\\n-\\t}\\n@@ -522,14 +495,0 @@\\n-\\tpublic static boolean equals(double[] x, double[] y) {\\n-\\t\\tif ((x == null) || (y == null)) {\\n-\\t\\t\\treturn !((x == null) ^ (y == null));\\n-\\t\\t}\\n-\\t\\tif (x.length != y.length) {\\n-\\t\\t\\treturn false;\\n-\\t\\t}\\n-\\t\\tfor (int i = 0; i < x.length; ++i) {\\n-\\t\\t\\tif (!org.apache.commons.math.util.MathUtils.equals(x[i], y[i])) {\\n-\\t\\t\\t\\treturn false;\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn true;\\n-\\t}\\n@@ -547,14 +506,0 @@\\n-\\tpublic static boolean equalsIncludingNaN(double[] x, double[] y) {\\n-\\t\\tif ((x == null) || (y == null)) {\\n-\\t\\t\\treturn !((x == null) ^ (y == null));\\n-\\t\\t}\\n-\\t\\tif (x.length != y.length) {\\n-\\t\\t\\treturn false;\\n-\\t\\t}\\n-\\t\\tfor (int i = 0; i < x.length; ++i) {\\n-\\t\\t\\tif (!org.apache.commons.math.util.MathUtils.equalsIncludingNaN(x[i], y[i])) {\\n-\\t\\t\\t\\treturn false;\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn true;\\n-\\t}\\n@@ -584,12 +529,0 @@\\n-\\tpublic static long factorial(final int n) {\\n-\\t\\tif (n < 0) {\\n-\\t\\t\\tthrow org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(\\n-\\t\\t\\torg.apache.commons.math.exception.util.LocalizedFormats.FACTORIAL_NEGATIVE_PARAMETER, \\n-\\t\\t\\tn);\\n-\\t\\t}\\n-\\t\\tif (n > 20) {\\n-\\t\\t\\tthrow new java.lang.ArithmeticException(\\n-\\t\\t\\t\\\"factorial value is too large to fit in a long\\\");\\n-\\t\\t}\\n-\\t\\treturn org.apache.commons.math.util.MathUtils.FACTORIALS[n];\\n-\\t}\\n@@ -617,11 +550,0 @@\\n-\\tpublic static double factorialDouble(final int n) {\\n-\\t\\tif (n < 0) {\\n-\\t\\t\\tthrow org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(\\n-\\t\\t\\torg.apache.commons.math.exception.util.LocalizedFormats.FACTORIAL_NEGATIVE_PARAMETER, \\n-\\t\\t\\tn);\\n-\\t\\t}\\n-\\t\\tif (n < 21) {\\n-\\t\\t\\treturn org.apache.commons.math.util.MathUtils.factorial(n);\\n-\\t\\t}\\n-\\t\\treturn org.apache.commons.math.util.FastMath.floor(org.apache.commons.math.util.FastMath.exp(org.apache.commons.math.util.MathUtils.factorialLog(n)) + 0.5);\\n-\\t}\\n@@ -642,15 +564,0 @@\\n-\\tpublic static double factorialLog(final int n) {\\n-\\t\\tif (n < 0) {\\n-\\t\\t\\tthrow org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(\\n-\\t\\t\\torg.apache.commons.math.exception.util.LocalizedFormats.FACTORIAL_NEGATIVE_PARAMETER, \\n-\\t\\t\\tn);\\n-\\t\\t}\\n-\\t\\tif (n < 21) {\\n-\\t\\t\\treturn org.apache.commons.math.util.FastMath.log(org.apache.commons.math.util.MathUtils.factorial(n));\\n-\\t\\t}\\n-\\t\\tdouble logSum = 0;\\n-\\t\\tfor (int i = 2; i <= n; i++) {\\n-\\t\\t\\tlogSum += org.apache.commons.math.util.FastMath.log(i);\\n-\\t\\t}\\n-\\t\\treturn logSum;\\n-\\t}\\n@@ -687,11 +594,0 @@\\n-\\tpublic static int gcd(final int p, final int q) {\\n-\\t\\tint u = p;\\n-\\t\\tint v = q;\\n-\\t\\tif ((u == 0) || (v == 0)) {\\n-\\t\\t\\tif ((u == java.lang.Integer.MIN_VALUE) || (v == java.lang.Integer.MIN_VALUE)) {\\n-\\t\\t\\t\\tthrow org.apache.commons.math.MathRuntimeException.createArithmeticException(\\n-\\t\\t\\t\\torg.apache.commons.math.exception.util.LocalizedFormats.GCD_OVERFLOW_32_BITS, \\n-\\t\\t\\t\\tp, q);\\n-\\t\\t\\t}\\n-\\t\\t\\treturn org.apache.commons.math.util.FastMath.abs(u) + org.apache.commons.math.util.FastMath.abs(v);\\n-\\t\\t}\\n@@ -703,6 +599,0 @@\\n-\\t\\tif (u > 0) {\\n-\\t\\t\\tu = -u;\\n-\\t\\t}\\n-\\t\\tif (v > 0) {\\n-\\t\\t\\tv = -v;\\n-\\t\\t}\\n@@ -710,2 +600,0 @@\\n-\\t\\tint k = 0;\\n-\\t\\twhile ((((u & 1) == 0) && ((v & 1) == 0)) && (k < 31)) {\\n@@ -713,9 +601,0 @@\\n-\\t\\t\\tu \\\/= 2;\\n-\\t\\t\\tv \\\/= 2;\\n-\\t\\t\\tk++;\\n-\\t\\t} \\n-\\t\\tif (k == 31) {\\n-\\t\\t\\tthrow org.apache.commons.math.MathRuntimeException.createArithmeticException(\\n-\\t\\t\\torg.apache.commons.math.exception.util.LocalizedFormats.GCD_OVERFLOW_32_BITS, \\n-\\t\\t\\tp, q);\\n-\\t\\t}\\n@@ -724 +603,0 @@\\n-\\t\\tint t = ((u & 1) == 1) ? v : -(u \\\/ 2);\\n@@ -727 +605,0 @@\\n-\\t\\tdo {\\n@@ -730,3 +607,0 @@\\n-\\t\\t\\twhile ((t & 1) == 0) {\\n-\\t\\t\\t\\tt \\\/= 2;\\n-\\t\\t\\t} \\n@@ -734,5 +608,0 @@\\n-\\t\\t\\tif (t > 0) {\\n-\\t\\t\\t\\tu = -t;\\n-\\t\\t\\t} else {\\n-\\t\\t\\t\\tv = t;\\n-\\t\\t\\t}\\n@@ -740 +609,0 @@\\n-\\t\\t\\tt = (v - u) \\\/ 2;\\n@@ -743,3 +611,0 @@\\n-\\t\\t} while (t != 0 );\\n-\\t\\treturn (-u) * (1 << k);\\n-\\t}\\n@@ -776,11 +641,0 @@\\n-\\tpublic static long gcd(final long p, final long q) {\\n-\\t\\tlong u = p;\\n-\\t\\tlong v = q;\\n-\\t\\tif ((u == 0) || (v == 0)) {\\n-\\t\\t\\tif ((u == java.lang.Long.MIN_VALUE) || (v == java.lang.Long.MIN_VALUE)) {\\n-\\t\\t\\t\\tthrow org.apache.commons.math.MathRuntimeException.createArithmeticException(\\n-\\t\\t\\t\\torg.apache.commons.math.exception.util.LocalizedFormats.GCD_OVERFLOW_64_BITS, \\n-\\t\\t\\t\\tp, q);\\n-\\t\\t\\t}\\n-\\t\\t\\treturn org.apache.commons.math.util.FastMath.abs(u) + org.apache.commons.math.util.FastMath.abs(v);\\n-\\t\\t}\\n@@ -792,6 +646,0 @@\\n-\\t\\tif (u > 0) {\\n-\\t\\t\\tu = -u;\\n-\\t\\t}\\n-\\t\\tif (v > 0) {\\n-\\t\\t\\tv = -v;\\n-\\t\\t}\\n@@ -799,2 +647,0 @@\\n-\\t\\tint k = 0;\\n-\\t\\twhile ((((u & 1) == 0) && ((v & 1) == 0)) && (k < 63)) {\\n@@ -802,9 +648,0 @@\\n-\\t\\t\\tu \\\/= 2;\\n-\\t\\t\\tv \\\/= 2;\\n-\\t\\t\\tk++;\\n-\\t\\t} \\n-\\t\\tif (k == 63) {\\n-\\t\\t\\tthrow org.apache.commons.math.MathRuntimeException.createArithmeticException(\\n-\\t\\t\\torg.apache.commons.math.exception.util.LocalizedFormats.GCD_OVERFLOW_64_BITS, \\n-\\t\\t\\tp, q);\\n-\\t\\t}\\n@@ -813 +650,0 @@\\n-\\t\\tlong t = ((u & 1) == 1) ? v : -(u \\\/ 2);\\n@@ -816 +652,0 @@\\n-\\t\\tdo {\\n@@ -819,3 +654,0 @@\\n-\\t\\t\\twhile ((t & 1) == 0) {\\n-\\t\\t\\t\\tt \\\/= 2;\\n-\\t\\t\\t} \\n@@ -823,5 +655,0 @@\\n-\\t\\t\\tif (t > 0) {\\n-\\t\\t\\t\\tu = -t;\\n-\\t\\t\\t} else {\\n-\\t\\t\\t\\tv = t;\\n-\\t\\t\\t}\\n@@ -829 +656,0 @@\\n-\\t\\t\\tt = (v - u) \\\/ 2;\\n@@ -832,3 +658,0 @@\\n-\\t\\t} while (t != 0 );\\n-\\t\\treturn (-u) * (1L << k);\\n-\\t}\\n@@ -842,3 +665,0 @@\\n-\\tpublic static int hash(double value) {\\n-\\t\\treturn new java.lang.Double(value).hashCode();\\n-\\t}\\n@@ -853,3 +673,0 @@\\n-\\tpublic static int hash(double[] value) {\\n-\\t\\treturn java.util.Arrays.hashCode(value);\\n-\\t}\\n@@ -864,3 +681,0 @@\\n-\\tpublic static byte indicator(final byte x) {\\n-\\t\\treturn x >= org.apache.commons.math.util.MathUtils.ZB ? org.apache.commons.math.util.MathUtils.PB : org.apache.commons.math.util.MathUtils.NB;\\n-\\t}\\n@@ -876,6 +690,0 @@\\n-\\tpublic static double indicator(final double x) {\\n-\\t\\tif (java.lang.Double.isNaN(x)) {\\n-\\t\\t\\treturn java.lang.Double.NaN;\\n-\\t\\t}\\n-\\t\\treturn x >= 0.0 ? 1.0 : -1.0;\\n-\\t}\\n@@ -890,6 +698,0 @@\\n-\\tpublic static float indicator(final float x) {\\n-\\t\\tif (java.lang.Float.isNaN(x)) {\\n-\\t\\t\\treturn java.lang.Float.NaN;\\n-\\t\\t}\\n-\\t\\treturn x >= 0.0F ? 1.0F : -1.0F;\\n-\\t}\\n@@ -903,3 +705,0 @@\\n-\\tpublic static int indicator(final int x) {\\n-\\t\\treturn x >= 0 ? 1 : -1;\\n-\\t}\\n@@ -913,3 +712,0 @@\\n-\\tpublic static long indicator(final long x) {\\n-\\t\\treturn x >= 0L ? 1L : -1L;\\n-\\t}\\n@@ -924,3 +720,0 @@\\n-\\tpublic static short indicator(final short x) {\\n-\\t\\treturn x >= org.apache.commons.math.util.MathUtils.ZS ? org.apache.commons.math.util.MathUtils.PS : org.apache.commons.math.util.MathUtils.NS;\\n-\\t}\\n@@ -951,12 +744,0 @@\\n-\\tpublic static int lcm(int a, int b) {\\n-\\t\\tif ((a == 0) || (b == 0)) {\\n-\\t\\t\\treturn 0;\\n-\\t\\t}\\n-\\t\\tint lcm = org.apache.commons.math.util.FastMath.abs(org.apache.commons.math.util.MathUtils.mulAndCheck(a \\\/ org.apache.commons.math.util.MathUtils.gcd(a, b), b));\\n-\\t\\tif (lcm == java.lang.Integer.MIN_VALUE) {\\n-\\t\\t\\tthrow org.apache.commons.math.MathRuntimeException.createArithmeticException(\\n-\\t\\t\\torg.apache.commons.math.exception.util.LocalizedFormats.LCM_OVERFLOW_32_BITS, \\n-\\t\\t\\ta, b);\\n-\\t\\t}\\n-\\t\\treturn lcm;\\n-\\t}\\n@@ -986,12 +767,0 @@\\n-\\tpublic static long lcm(long a, long b) {\\n-\\t\\tif ((a == 0) || (b == 0)) {\\n-\\t\\t\\treturn 0;\\n-\\t\\t}\\n-\\t\\tlong lcm = org.apache.commons.math.util.FastMath.abs(org.apache.commons.math.util.MathUtils.mulAndCheck(a \\\/ org.apache.commons.math.util.MathUtils.gcd(a, b), b));\\n-\\t\\tif (lcm == java.lang.Long.MIN_VALUE) {\\n-\\t\\t\\tthrow org.apache.commons.math.MathRuntimeException.createArithmeticException(\\n-\\t\\t\\torg.apache.commons.math.exception.util.LocalizedFormats.LCM_OVERFLOW_64_BITS, \\n-\\t\\t\\ta, b);\\n-\\t\\t}\\n-\\t\\treturn lcm;\\n-\\t}\\n@@ -1015,3 +784,0 @@\\n-\\tpublic static double log(double base, double x) {\\n-\\t\\treturn org.apache.commons.math.util.FastMath.log(x) \\\/ org.apache.commons.math.util.FastMath.log(base);\\n-\\t}\\n@@ -1029,7 +795,0 @@\\n-\\tpublic static int mulAndCheck(int x, int y) {\\n-\\t\\tlong m = ((long) (x)) * ((long) (y));\\n-\\t\\tif ((m < java.lang.Integer.MIN_VALUE) || (m > java.lang.Integer.MAX_VALUE)) {\\n-\\t\\t\\tthrow new java.lang.ArithmeticException(\\\"overflow: mul\\\");\\n-\\t\\t}\\n-\\t\\treturn ((int) (m));\\n-\\t}\\n@@ -1047,4 +806,0 @@\\n-\\tpublic static long mulAndCheck(long a, long b) {\\n-\\t\\tlong ret;\\n-\\t\\tjava.lang.String msg = \\\"overflow: multiply\\\";\\n-\\t\\tif (a > b) {\\n@@ -1052,4 +807,0 @@\\n-\\t\\t\\tret = org.apache.commons.math.util.MathUtils.mulAndCheck(b, a);\\n-\\t\\t} else \\n-\\t\\tif (a < 0) {\\n-\\t\\t\\tif (b < 0) {\\n@@ -1057,6 +808,0 @@\\n-\\t\\t\\t\\tif (a >= (java.lang.Long.MAX_VALUE \\\/ b)) {\\n-\\t\\t\\t\\t\\tret = a * b;\\n-\\t\\t\\t\\t} else {\\n-\\t\\t\\t\\t\\tthrow new java.lang.ArithmeticException(msg);\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t} else if (b > 0) {\\n@@ -1064,4 +809,0 @@\\n-\\t\\t\\t\\tif ((java.lang.Long.MIN_VALUE \\\/ b) <= a) {\\n-\\t\\t\\t\\t\\tret = a * b;\\n-\\t\\t\\t\\t} else {\\n-\\t\\t\\t\\t\\tthrow new java.lang.ArithmeticException(msg);\\n@@ -1069,2 +810,0 @@\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t} else {\\n@@ -1072,3 +811,0 @@\\n-\\t\\t\\t\\tret = 0;\\n-\\t\\t\\t}\\n-\\t\\t} else if (a > 0) {\\n@@ -1079,6 +815,0 @@\\n-\\t\\t\\tif (a <= (java.lang.Long.MAX_VALUE \\\/ b)) {\\n-\\t\\t\\t\\tret = a * b;\\n-\\t\\t\\t} else {\\n-\\t\\t\\t\\tthrow new java.lang.ArithmeticException(msg);\\n-\\t\\t\\t}\\n-\\t\\t} else {\\n@@ -1086,2 +816,0 @@\\n-\\t\\t\\tret = 0;\\n-\\t\\t}\\n@@ -1089,2 +817,0 @@\\n-\\t\\treturn ret;\\n-\\t}\\n@@ -1101 +827,0 @@\\n-\\tpublic static double scalb(final double d, final int scaleFactor) {\\n@@ -1104,3 +829,0 @@\\n-\\t\\tif (((d == 0) || java.lang.Double.isNaN(d)) || java.lang.Double.isInfinite(d)) {\\n-\\t\\t\\treturn d;\\n-\\t\\t}\\n@@ -1109,3 +831,0 @@\\n-\\t\\tfinal long bits = java.lang.Double.doubleToLongBits(d);\\n-\\t\\tfinal long exponent = bits & 0x7ff0000000000000L;\\n-\\t\\tfinal long rest = bits & 0x800fffffffffffffL;\\n@@ -1114,2 +833,0 @@\\n-\\t\\tfinal long newBits = rest | (exponent + (((long) (scaleFactor)) << 52));\\n-\\t\\treturn java.lang.Double.longBitsToDouble(newBits);\\n@@ -1117 +834,0 @@\\n-\\t}\\n@@ -1138,3 +854,0 @@\\n-\\tpublic static double normalizeAngle(double a, double center) {\\n-\\t\\treturn a - (org.apache.commons.math.util.MathUtils.TWO_PI * org.apache.commons.math.util.FastMath.floor(((a + org.apache.commons.math.util.FastMath.PI) - center) \\\/ org.apache.commons.math.util.MathUtils.TWO_PI));\\n-\\t}\\n@@ -1163,34 +876,0 @@\\n-\\tpublic static double[] normalizeArray(double[] values, double normalizedSum) throws \\n-\\tjava.lang.ArithmeticException, java.lang.IllegalArgumentException {\\n-\\t\\tif (java.lang.Double.isInfinite(normalizedSum)) {\\n-\\t\\t\\tthrow org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(\\n-\\t\\t\\torg.apache.commons.math.exception.util.LocalizedFormats.NORMALIZE_INFINITE);\\n-\\t\\t}\\n-\\t\\tif (java.lang.Double.isNaN(normalizedSum)) {\\n-\\t\\t\\tthrow org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(\\n-\\t\\t\\torg.apache.commons.math.exception.util.LocalizedFormats.NORMALIZE_NAN);\\n-\\t\\t}\\n-\\t\\tdouble sum = 0.0;\\n-\\t\\tfinal int len = values.length;\\n-\\t\\tdouble[] out = new double[len];\\n-\\t\\tfor (int i = 0; i < len; i++) {\\n-\\t\\t\\tif (java.lang.Double.isInfinite(values[i])) {\\n-\\t\\t\\t\\tthrow org.apache.commons.math.MathRuntimeException.createArithmeticException(\\n-\\t\\t\\t\\torg.apache.commons.math.exception.util.LocalizedFormats.INFINITE_ARRAY_ELEMENT, values[i], i);\\n-\\t\\t\\t}\\n-\\t\\t\\tif (!java.lang.Double.isNaN(values[i])) {\\n-\\t\\t\\t\\tsum += values[i];\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\tif (sum == 0) {\\n-\\t\\t\\tthrow org.apache.commons.math.MathRuntimeException.createArithmeticException(org.apache.commons.math.exception.util.LocalizedFormats.ARRAY_SUMS_TO_ZERO);\\n-\\t\\t}\\n-\\t\\tfor (int i = 0; i < len; i++) {\\n-\\t\\t\\tif (java.lang.Double.isNaN(values[i])) {\\n-\\t\\t\\t\\tout[i] = java.lang.Double.NaN;\\n-\\t\\t\\t} else {\\n-\\t\\t\\t\\tout[i] = (values[i] * normalizedSum) \\\/ sum;\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn out;\\n-\\t}\\n@@ -1207,3 +886,0 @@\\n-\\tpublic static double round(double x, int scale) {\\n-\\t\\treturn org.apache.commons.math.util.MathUtils.round(x, scale, java.math.BigDecimal.ROUND_HALF_UP);\\n-\\t}\\n@@ -1223,5 +899,0 @@\\n-\\tpublic static double round(double x, int scale, int roundingMethod) {\\n-\\t\\ttry {\\n-\\t\\t\\treturn new java.math.BigDecimal(\\n-\\t\\t\\tjava.lang.Double.toString(x)).setScale(\\n-\\t\\t\\tscale, roundingMethod).doubleValue();\\n@@ -1229,8 +900,0 @@\\n-\\t\\t} catch (java.lang.NumberFormatException ex) {\\n-\\t\\t\\tif (java.lang.Double.isInfinite(x)) {\\n-\\t\\t\\t\\treturn x;\\n-\\t\\t\\t} else {\\n-\\t\\t\\t\\treturn java.lang.Double.NaN;\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t}\\n@@ -1247,3 +910,0 @@\\n-\\tpublic static float round(float x, int scale) {\\n-\\t\\treturn org.apache.commons.math.util.MathUtils.round(x, scale, java.math.BigDecimal.ROUND_HALF_UP);\\n-\\t}\\n@@ -1263,5 +923,0 @@\\n-\\tpublic static float round(float x, int scale, int roundingMethod) {\\n-\\t\\tfloat sign = org.apache.commons.math.util.MathUtils.indicator(x);\\n-\\t\\tfloat factor = ((float) (org.apache.commons.math.util.FastMath.pow(10.0F, scale))) * sign;\\n-\\t\\treturn ((float) (org.apache.commons.math.util.MathUtils.roundUnscaled(x * factor, sign, roundingMethod))) \\\/ factor;\\n-\\t}\\n@@ -1281,37 +936,0 @@\\n-\\tprivate static double roundUnscaled(double unscaled, double sign, \\n-\\tint roundingMethod) {\\n-\\t\\tswitch (roundingMethod) {\\n-\\t\\t\\tcase java.math.BigDecimal.ROUND_CEILING :\\n-\\t\\t\\t\\tif (sign == (-1)) {\\n-\\t\\t\\t\\t\\tunscaled = org.apache.commons.math.util.FastMath.floor(org.apache.commons.math.util.FastMath.nextAfter(unscaled, java.lang.Double.NEGATIVE_INFINITY));\\n-\\t\\t\\t\\t} else {\\n-\\t\\t\\t\\t\\tunscaled = org.apache.commons.math.util.FastMath.ceil(org.apache.commons.math.util.FastMath.nextAfter(unscaled, java.lang.Double.POSITIVE_INFINITY));\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t\\tbreak;\\n-\\t\\t\\tcase java.math.BigDecimal.ROUND_DOWN :\\n-\\t\\t\\t\\tunscaled = org.apache.commons.math.util.FastMath.floor(org.apache.commons.math.util.FastMath.nextAfter(unscaled, java.lang.Double.NEGATIVE_INFINITY));\\n-\\t\\t\\t\\tbreak;\\n-\\t\\t\\tcase java.math.BigDecimal.ROUND_FLOOR :\\n-\\t\\t\\t\\tif (sign == (-1)) {\\n-\\t\\t\\t\\t\\tunscaled = org.apache.commons.math.util.FastMath.ceil(org.apache.commons.math.util.FastMath.nextAfter(unscaled, java.lang.Double.POSITIVE_INFINITY));\\n-\\t\\t\\t\\t} else {\\n-\\t\\t\\t\\t\\tunscaled = org.apache.commons.math.util.FastMath.floor(org.apache.commons.math.util.FastMath.nextAfter(unscaled, java.lang.Double.NEGATIVE_INFINITY));\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t\\tbreak;\\n-\\t\\t\\tcase java.math.BigDecimal.ROUND_HALF_DOWN : \\t\\t\\t\\t{\\n-\\t\\t\\t\\t\\tunscaled = org.apache.commons.math.util.FastMath.nextAfter(unscaled, java.lang.Double.NEGATIVE_INFINITY);\\n-\\t\\t\\t\\t\\tdouble fraction = unscaled - org.apache.commons.math.util.FastMath.floor(unscaled);\\n-\\t\\t\\t\\t\\tif (fraction > 0.5) {\\n-\\t\\t\\t\\t\\t\\tunscaled = org.apache.commons.math.util.FastMath.ceil(unscaled);\\n-\\t\\t\\t\\t\\t} else {\\n-\\t\\t\\t\\t\\t\\tunscaled = org.apache.commons.math.util.FastMath.floor(unscaled);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t\\t\\tbreak;\\n-\\t\\t\\t\\t}\\n-\\t\\t\\tcase java.math.BigDecimal.ROUND_HALF_EVEN : \\t\\t\\t\\t{\\n-\\t\\t\\t\\t\\tdouble fraction = unscaled - org.apache.commons.math.util.FastMath.floor(unscaled);\\n-\\t\\t\\t\\t\\tif (fraction > 0.5) {\\n-\\t\\t\\t\\t\\t\\tunscaled = org.apache.commons.math.util.FastMath.ceil(unscaled);\\n-\\t\\t\\t\\t\\t} else if (fraction < 0.5) {\\n-\\t\\t\\t\\t\\t\\tunscaled = org.apache.commons.math.util.FastMath.floor(unscaled);\\n-\\t\\t\\t\\t\\t} else \\n@@ -1319,6 +937,0 @@\\n-\\t\\t\\t\\t\\tif ((org.apache.commons.math.util.FastMath.floor(unscaled) \\\/ 2.0) == org.apache.commons.math.util.FastMath.floor(java.lang.Math.floor(\\n-\\t\\t\\t\\t\\tunscaled) \\\/ 2.0)) {\\n-\\t\\t\\t\\t\\t\\tunscaled = org.apache.commons.math.util.FastMath.floor(unscaled);\\n-\\t\\t\\t\\t\\t} else {\\n-\\t\\t\\t\\t\\t\\tunscaled = org.apache.commons.math.util.FastMath.ceil(unscaled);\\n-\\t\\t\\t\\t\\t}\\n@@ -1326,32 +938,0 @@\\n-\\t\\t\\t\\t\\tbreak;\\n-\\t\\t\\t\\t}\\n-\\t\\t\\tcase java.math.BigDecimal.ROUND_HALF_UP : \\t\\t\\t\\t{\\n-\\t\\t\\t\\t\\tunscaled = org.apache.commons.math.util.FastMath.nextAfter(unscaled, java.lang.Double.POSITIVE_INFINITY);\\n-\\t\\t\\t\\t\\tdouble fraction = unscaled - org.apache.commons.math.util.FastMath.floor(unscaled);\\n-\\t\\t\\t\\t\\tif (fraction >= 0.5) {\\n-\\t\\t\\t\\t\\t\\tunscaled = org.apache.commons.math.util.FastMath.ceil(unscaled);\\n-\\t\\t\\t\\t\\t} else {\\n-\\t\\t\\t\\t\\t\\tunscaled = org.apache.commons.math.util.FastMath.floor(unscaled);\\n-\\t\\t\\t\\t\\t}\\n-\\t\\t\\t\\t\\tbreak;\\n-\\t\\t\\t\\t}\\n-\\t\\t\\tcase java.math.BigDecimal.ROUND_UNNECESSARY :\\n-\\t\\t\\t\\tif (unscaled != org.apache.commons.math.util.FastMath.floor(unscaled)) {\\n-\\t\\t\\t\\t\\tthrow new java.lang.ArithmeticException(\\\"Inexact result from rounding\\\");\\n-\\t\\t\\t\\t}\\n-\\t\\t\\t\\tbreak;\\n-\\t\\t\\tcase java.math.BigDecimal.ROUND_UP :\\n-\\t\\t\\t\\tunscaled = org.apache.commons.math.util.FastMath.ceil(org.apache.commons.math.util.FastMath.nextAfter(unscaled, java.lang.Double.POSITIVE_INFINITY));\\n-\\t\\t\\t\\tbreak;\\n-\\t\\t\\tdefault :\\n-\\t\\t\\t\\tthrow org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(\\n-\\t\\t\\t\\torg.apache.commons.math.exception.util.LocalizedFormats.INVALID_ROUNDING_METHOD, \\n-\\t\\t\\t\\troundingMethod, \\n-\\t\\t\\t\\t\\\"ROUND_CEILING\\\", java.math.BigDecimal.ROUND_CEILING, \\n-\\t\\t\\t\\t\\\"ROUND_DOWN\\\", java.math.BigDecimal.ROUND_DOWN, \\n-\\t\\t\\t\\t\\\"ROUND_FLOOR\\\", java.math.BigDecimal.ROUND_FLOOR, \\n-\\t\\t\\t\\t\\\"ROUND_HALF_DOWN\\\", java.math.BigDecimal.ROUND_HALF_DOWN, \\n-\\t\\t\\t\\t\\\"ROUND_HALF_EVEN\\\", java.math.BigDecimal.ROUND_HALF_EVEN, \\n-\\t\\t\\t\\t\\\"ROUND_HALF_UP\\\", java.math.BigDecimal.ROUND_HALF_UP, \\n-\\t\\t\\t\\t\\\"ROUND_UNNECESSARY\\\", java.math.BigDecimal.ROUND_UNNECESSARY, \\n-\\t\\t\\t\\t\\\"ROUND_UP\\\", java.math.BigDecimal.ROUND_UP);}\\n@@ -1359,2 +939,0 @@\\n-\\t\\treturn unscaled;\\n-\\t}\\n@@ -1372,3 +950,0 @@\\n-\\tpublic static byte sign(final byte x) {\\n-\\t\\treturn x == org.apache.commons.math.util.MathUtils.ZB ? org.apache.commons.math.util.MathUtils.ZB : x > org.apache.commons.math.util.MathUtils.ZB ? org.apache.commons.math.util.MathUtils.PB : org.apache.commons.math.util.MathUtils.NB;\\n-\\t}\\n@@ -1388,5 +964,429 @@\\n-\\tpublic static double sign(final double x) {\\n-\\t\\tif (java.lang.Double.isNaN(x)) {\\n-\\t\\t\\treturn java.lang.Double.NaN;\\n-\\t\\t}\\n-\\t\\treturn x == 0.0 ? 0.0 : x > 0.0 ? 1.0 : -1.0;\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t(x > 0.0) && java.lang.Double.isNaN(y)) || (x == y);} \\tpublic static boolean equalsIncludingNaN(double x, double y) { \\t\\treturn (java.lang.Double.isNaN(x) && java.lang.Double.isNaN(y)) || org.apache.commons.math.util.MathUtils.equals(x, y, 1);} \\tpublic static boolean equals(double x, double y, double eps) { \\t\\treturn org.apache.commons.math.util.MathUtils.equals(x, y, 1) || (org.apache.commons.math.util.FastMath.abs(y - x) <= eps);} \\tpublic static boolean equalsIncludingNaN(double x, double y, double eps) { \\t\\treturn org.apache.commons.math.util.MathUtils.equalsIncludingNaN(x, y) || (org.apache.commons.math.util.FastMath.abs(y - x) <= eps);} \\tpublic static boolean equals(double x, double y, int maxUlps) { \\t\\tassert (maxUlps > 0) && (maxUlps < org.apache.commons.math.util.MathUtils.NAN_GAP); \\t\\tlong xInt = java.lang.Double.doubleToLongBits(x); \\t\\tlong yInt = java.lang.Double.doubleToLongBits(y); \\t\\tif (xInt < 0) { \\t\\t\\txInt = org.apache.commons.math.util.MathUtils.SGN_MASK - xInt;} \\t\\tif (yInt < 0) { \\t\\t\\tyInt = org.apache.commons.math.util.MathUtils.SGN_MASK - yInt;} \\t\\tfinal boolean isEqual = org.apache.commons.math.util.FastMath.abs(xInt - yInt) <= maxUlps; \\t\\treturn (isEqual && (!java.lang.Double.isNaN(x))) && (!java.lang.Double.isNaN(y));} \\tpublic static boolean equalsIncludingNaN(double x, double y, int maxUlps) { \\t\\treturn (java.lang.Double.isNaN(x) && java.lang.Double.isNaN(y)) || org.apache.commons.math.util.MathUtils.equals(x, y, maxUlps);} \\tpublic static boolean equals(double[] x, double[] y) { \\t\\tif ((x == null) || (y == null)) { \\t\\t\\treturn !((x == null) ^ (y == null));} \\t\\tif (x.length != y.length) { \\t\\t\\treturn false;} \\t\\tfor (int i = 0; i < x.length; ++i) { \\t\\t\\tif (!org.apache.commons.math.util.MathUtils.equals(x[i], y[i])) { \\t\\t\\t\\treturn false;}} \\t\\treturn true;} \\tpublic static boolean equalsIncludingNaN(double[] x, double[] y) { \\t\\tif ((x == null) || (y == null)) { \\t\\t\\treturn !((x == null) ^ (y == null));} \\t\\tif (x.length != y.length) { \\t\\t\\treturn false;} \\t\\tfor (int i = 0; i < x.length; ++i) { \\t\\t\\tif (!org.apache.commons.math.util.MathUtils.equalsIncludingNaN(x[i], y[i])) { \\t\\t\\t\\treturn false;}} \\t\\treturn true;} \\tpublic static long factorial(final int n) { \\t\\tif (n < 0) { \\t\\t\\tthrow org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(org.apache.commons.math.exception.util.LocalizedFormats.FACTORIAL_NEGATIVE_PARAMETER, n);} \\t\\tif (n > 20) { \\t\\t\\tthrow new java.lang.ArithmeticException(\\\"factorial value is too large to fit in a long\\\");} \\t\\treturn org.apache.commons.math.util.MathUtils.FACTORIALS[n];} \\tpublic static double factorialDouble(final int n) { \\t\\tif (n < 0) { \\t\\t\\tthrow org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(org.apache.commons.math.exception.util.LocalizedFormats.FACTORIAL_NEGATIVE_PARAMETER, n);} \\t\\tif (n < 21) { \\t\\t\\treturn org.apache.commons.math.util.MathUtils.factorial(n);} \\t\\treturn org.apache.commons.math.util.FastMath.floor(org.apache.commons.math.util.FastMath.exp(org.apache.commons.math.util.MathUtils.factorialLog(n)) + 0.5);} \\tpublic static double factorialLog(final int n) { \\t\\tif (n < 0) { \\t\\t\\tthrow org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(org.apache.commons.math.exception.util.LocalizedFormats.FACTORIAL_NEGATIVE_PARAMETER, n);} \\t\\tif (n < 21) { \\t\\t\\treturn org.apache.commons.math.util.FastMath.log(org.apache.commons.math.util.MathUtils.factorial(n));} \\t\\tdouble logSum = 0; \\t\\tfor (int i = 2; i <= n; i++) { \\t\\t\\tlogSum += org.apache.commons.math.util.FastMath.log(i);} \\t\\treturn logSum;} \\tpublic static int gcd(final int p, final int q) { \\t\\tint u = p; \\t\\tint v = q; \\t\\tif ((u == 0) || (v == 0)) { \\t\\t\\tif ((u == java.lang.Integer.MIN_VALUE) || (v == java.lang.Integer.MIN_VALUE)) { \\t\\t\\t\\tthrow org.apache.commons.math.MathRuntimeException.createArithmeticException(org.apache.commons.math.exception.util.LocalizedFormats.GCD_OVERFLOW_32_BITS, p, q);} \\t\\t\\treturn org.apache.commons.math.util.FastMath.abs(u) + org.apache.commons.math.util.FastMath.abs(v);} \\t\\tif (u > 0) { \\t\\t\\tu = -u;} \\t\\tif (v > 0) { \\t\\t\\tv = -v;} \\t\\tint k = 0; \\t\\twhile ((((u & 1) == 0) && ((v & 1) == 0)) && (k < 31)) { \\t\\t\\tu \\\/= 2; \\t\\t\\tv \\\/= 2; \\t\\t\\tk++;} \\t\\tif (k == 31) { \\t\\t\\tthrow org.apache.commons.math.MathRuntimeException.createArithmeticException(org.apache.commons.math.exception.util.LocalizedFormats.GCD_OVERFLOW_32_BITS, p, q);} \\t\\tint t = ((u & 1) == 1) ? v : -(u \\\/ 2); \\t\\tdo { \\t\\t\\twhile ((t & 1) == 0) { \\t\\t\\t\\tt \\\/= 2;} \\t\\t\\tif (t > 0) { \\t\\t\\t\\tu = -t;} else { \\t\\t\\t\\tv = t;} \\t\\t\\tt = (v - u) \\\/ 2;} while (t != 0 ); \\t\\treturn (-u) * (1 << k);} \\tpublic static long gcd(final long p, final long q) { \\t\\tlong u = p; \\t\\tlong v = q; \\t\\tif ((u == 0) || (v == 0)) { \\t\\t\\tif ((u == java.lang.Long.MIN_VALUE) || (v == java.lang.Long.MIN_VALUE)) { \\t\\t\\t\\tthrow org.apache.commons.math.MathRuntimeException.createArithmeticException(org.apache.commons.math.exception.util.LocalizedFormats.GCD_OVERFLOW_64_BITS, p, q);} \\t\\t\\treturn org.apache.commons.math.util.FastMath.abs(u) + org.apache.commons.math.util.FastMath.abs(v);} \\t\\tif (u > 0) { \\t\\t\\tu = -u;} \\t\\tif (v > 0) { \\t\\t\\tv = -v;} \\t\\tint k = 0; \\t\\twhile ((((u & 1) == 0) && ((v & 1) == 0)) && (k < 63)) { \\t\\t\\tu \\\/= 2; \\t\\t\\tv \\\/= 2; \\t\\t\\tk++;} \\t\\tif (k == 63) { \\t\\t\\tthrow org.apache.commons.math.MathRuntimeException.createArithmeticException(org.apache.commons.math.exception.util.LocalizedFormats.GCD_OVERFLOW_64_BITS, p, q);} \\t\\tlong t = ((u & 1) == 1) ? v : -(u \\\/ 2); \\t\\tdo { \\t\\t\\twhile ((t & 1) == 0) { \\t\\t\\t\\tt \\\/= 2;} \\t\\t\\tif (t > 0) { \\t\\t\\t\\tu = -t;} else { \\t\\t\\t\\tv = t;} \\t\\t\\tt = (v - u) \\\/ 2;} while (t != 0 ); \\t\\treturn (-u) * (1L << k);} \\tpublic static int hash(double value) { \\t\\treturn new java.lang.Double(value).hashCode();} \\tpublic static int hash(double[] value) { \\t\\treturn java.util.Arrays.hashCode(value);} \\tpublic static byte indicator(final byte x) { \\t\\treturn x >= org.apache.commons.math.util.MathUtils.ZB ? org.apache.commons.math.util.MathUtils.PB : org.apache.commons.math.util.MathUtils.NB;} \\tpublic static double indicator(final double x) { \\t\\tif (java.lang.Double.isNaN(x)) { \\t\\t\\treturn java.lang.Double.NaN;} \\t\\treturn x >= 0.0 ? 1.0 : -1.0;} \\tpublic static float indicator(final float x) { \\t\\tif (java.lang.Float.isNaN(x)) { \\t\\t\\treturn java.lang.Float.NaN;} \\t\\treturn x >= 0.0F ? 1.0F : -1.0F;} \\tpublic static int indicator(final int x) { \\t\\treturn x >= 0 ? 1 : -1;} \\tpublic static long indicator(final long x) { \\t\\treturn x >= 0L ? 1L : -1L;} \\tpublic static short indicator(final short x) { \\t\\treturn x >= org.apache.commons.math.util.MathUtils.ZS ? org.apache.commons.math.util.MathUtils.PS : org.apache.commons.math.util.MathUtils.NS;} \\tpublic static int lcm(int a, int b) { \\t\\tif ((a == 0) || (b == 0)) { \\t\\t\\treturn 0;} \\t\\tint lcm = org.apache.commons.math.util.FastMath.abs(org.apache.commons.math.util.MathUtils.mulAndCheck(a \\\/ org.apache.commons.math.util.MathUtils.gcd(a, b), b)); \\t\\tif (lcm == java.lang.Integer.MIN_VALUE) { \\t\\t\\tthrow org.apache.commons.math.MathRuntimeException.createArithmeticException(org.apache.commons.math.exception.util.LocalizedFormats.LCM_OVERFLOW_32_BITS, a, b);} \\t\\treturn lcm;} \\tpublic static long lcm(long a, long b) { \\t\\tif ((a == 0) || (b == 0)) { \\t\\t\\treturn 0;} \\t\\tlong lcm = org.apache.commons.math.util.FastMath.abs(org.apache.commons.math.util.MathUtils.mulAndCheck(a \\\/ org.apache.commons.math.util.MathUtils.gcd(a, b), b)); \\t\\tif (lcm == java.lang.Long.MIN_VALUE) { \\t\\t\\tthrow org.apache.commons.math.MathRuntimeException.createArithmeticException(org.apache.commons.math.exception.util.LocalizedFormats.LCM_OVERFLOW_64_BITS, a, b);} \\t\\treturn lcm;} \\tpublic static double log(double base, double x) { \\t\\treturn org.apache.commons.math.util.FastMath.log(x) \\\/ org.apache.commons.math.util.FastMath.log(base);} \\tpublic static int mulAndCheck(int x, int y) { \\t\\tlong m = ((long) (x)) * ((long) (y)); \\t\\tif ((m < java.lang.Integer.MIN_VALUE) || (m > java.lang.Integer.MAX_VALUE)) { \\t\\t\\tthrow new java.lang.ArithmeticException(\\\"overflow: mul\\\");} \\t\\treturn ((int) (m));} \\tpublic static long mulAndCheck(long a, long b) { \\t\\tlong ret; \\t\\tjava.lang.String msg = \\\"overflow: multiply\\\"; \\t\\tif (a > b) { \\t\\t\\tret = org.apache.commons.math.util.MathUtils.mulAndCheck(b, a);} else if (a < 0) { \\t\\t\\tif (b < 0) { \\t\\t\\t\\tif (a >= (java.lang.Long.MAX_VALUE \\\/ b)) { \\t\\t\\t\\t\\tret = a * b;} else { \\t\\t\\t\\t\\tthrow new java.lang.ArithmeticException(msg);}} else if (b > 0) { \\t\\t\\t\\tif ((java.lang.Long.MIN_VALUE \\\/ b) <= a) { \\t\\t\\t\\t\\tret = a * b;} else { \\t\\t\\t\\t\\tthrow new java.lang.ArithmeticException(msg);}} else { \\t\\t\\t\\tret = 0;}} else if (a > 0) { \\t\\t\\tif (a <= (java.lang.Long.MAX_VALUE \\\/ b)) { \\t\\t\\t\\tret = a * b;} else { \\t\\t\\t\\tthrow new java.lang.ArithmeticException(msg);}} else { \\t\\t\\tret = 0;} \\t\\treturn ret;} \\tpublic static double scalb(final double d, final int scaleFactor) { \\t\\tif (((d == 0) || java.lang.Double.isNaN(d)) || java.lang.Double.isInfinite(d)) { \\t\\t\\treturn d;} \\t\\tfinal long bits = java.lang.Double.doubleToLongBits(d); \\t\\tfinal long exponent = bits & 0x7ff0000000000000L; \\t\\tfinal long rest = bits & 0x800fffffffffffffL; \\t\\tfinal long newBits = rest | (exponent + (((long) (scaleFactor)) << 52)); \\t\\treturn java.lang.Double.longBitsToDouble(newBits);} \\tpublic static double normalizeAngle(double a, double center) { \\t\\treturn a - (org.apache.commons.math.util.MathUtils.TWO_PI * org.apache.commons.math.util.FastMath.floor(((a + org.apache.commons.math.util.FastMath.PI) - center) \\\/ org.apache.commons.math.util.MathUtils.TWO_PI));} \\tpublic static double[] normalizeArray(double[] values, double normalizedSum) throws java.lang.ArithmeticException, java.lang.IllegalArgumentException { \\t\\tif (java.lang.Double.isInfinite(normalizedSum)) { \\t\\t\\tthrow org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(org.apache.commons.math.exception.util.LocalizedFormats.NORMALIZE_INFINITE);} \\t\\tif (java.lang.Double.isNaN(normalizedSum)) { \\t\\t\\tthrow org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(org.apache.commons.math.exception.util.LocalizedFormats.NORMALIZE_NAN);} \\t\\tdouble sum = 0.0; \\t\\tfinal int len = values.length; \\t\\tdouble[] out = new double[len]; \\t\\tfor (int i = 0; i < len; i++) { \\t\\t\\tif (java.lang.Double.isInfinite(values[i])) { \\t\\t\\t\\tthrow org.apache.commons.math.MathRuntimeException.createArithmeticException(org.apache.commons.math.exception.util.LocalizedFormats.INFINITE_ARRAY_ELEMENT, values[i], i);} \\t\\t\\tif (!java.lang.Double.isNaN(values[i])) { \\t\\t\\t\\tsum += values[i];}} \\t\\tif (sum == 0) { \\t\\t\\tthrow org.apache.commons.math.MathRuntimeException.createArithmeticException(org.apache.commons.math.exception.util.LocalizedFormats.ARRAY_SUMS_TO_ZERO);} \\t\\tfor (int i = 0; i < len; i++) { \\t\\t\\tif (java.lang.Double.isNaN(values[i])) { \\t\\t\\t\\tout[i] = java.lang.Double.NaN;} else { \\t\\t\\t\\tout[i] = (values[i] * normalizedSum) \\\/ sum;}} \\t\\treturn out;} \\tpublic static double round(double x, int scale) { \\t\\treturn org.apache.commons.math.util.MathUtils.round(x, scale, java.math.BigDecimal.ROUND_HALF_UP);} \\tpublic static double round(double x, int scale, int roundingMethod) { \\t\\ttry { \\t\\t\\treturn new java.math.BigDecimal(java.lang.Double.toString(x)).setScale(scale, roundingMethod).doubleValue();} catch (java.lang.NumberFormatException ex) { \\t\\t\\tif (java.lang.Double.isInfinite(x)) { \\t\\t\\t\\treturn x;} else { \\t\\t\\t\\treturn java.lang.Double.NaN;}}} \\tpublic static float round(float x, int scale) { \\t\\treturn org.apache.commons.math.util.MathUtils.round(x, scale, java.math.BigDecimal.ROUND_HALF_UP);} \\tpublic static float round(float x, int scale, int roundingMethod) { \\t\\tfloat sign = org.apache.commons.math.util.MathUtils.indicator(x); \\t\\tfloat factor = ((float) (org.apache.commons.math.util.FastMath.pow(10.0F, scale))) * sign; \\t\\treturn ((float) (org.apache.commons.math.util.MathUtils.roundUnscaled(x * factor, sign, roundingMethod))) \\\/ factor;} \\tprivate static double roundUnscaled(double unscaled, double sign, int roundingMethod) { \\t\\tswitch (roundingMethod) { \\t\\t\\tcase java.math.BigDecimal.ROUND_CEILING : \\t\\t\\t\\tif (sign == (-1)) { \\t\\t\\t\\t\\tunscaled = org.apache.commons.math.util.FastMath.floor(org.apache.commons.math.util.FastMath.nextAfter(unscaled, java.lang.Double.NEGATIVE_INFINITY));} else { \\t\\t\\t\\t\\tunscaled = org.apache.commons.math.util.FastMath.ceil(org.apache.commons.math.util.FastMath.nextAfter(unscaled, java.lang.Double.POSITIVE_INFINITY));} \\t\\t\\t\\tbreak; \\t\\t\\tcase java.math.BigDecimal.ROUND_DOWN : \\t\\t\\t\\tunscaled = org.apache.commons.math.util.FastMath.floor(org.apache.commons.math.util.FastMath.nextAfter(unscaled, java.lang.Double.NEGATIVE_INFINITY)); \\t\\t\\t\\tbreak; \\t\\t\\tcase java.math.BigDecimal.ROUND_FLOOR : \\t\\t\\t\\tif (sign == (-1)) { \\t\\t\\t\\t\\tunscaled = org.apache.commons.math.util.FastMath.ceil(org.apache.commons.math.util.FastMath.nextAfter(unscaled, java.lang.Double.POSITIVE_INFINITY));} else { \\t\\t\\t\\t\\tunscaled = org.apache.commons.math.util.FastMath.floor(org.apache.commons.math.util.FastMath.nextAfter(unscaled, java.lang.Double.NEGATIVE_INFINITY));} \\t\\t\\t\\tbreak; \\t\\t\\tcase java.math.BigDecimal.ROUND_HALF_DOWN : \\t\\t\\t\\t{ \\t\\t\\t\\t\\tunscaled = org.apache.commons.math.util.FastMath.nextAfter(unscaled, java.lang.Double.NEGATIVE_INFINITY); \\t\\t\\t\\t\\tdouble fraction = unscaled - org.apache.commons.math.util.FastMath.floor(unscaled); \\t\\t\\t\\t\\tif (fraction > 0.5) { \\t\\t\\t\\t\\t\\tunscaled = org.apache.commons.math.util.FastMath.ceil(unscaled);} else { \\t\\t\\t\\t\\t\\tunscaled = org.apache.commons.math.util.FastMath.floor(unscaled);} \\t\\t\\t\\t\\tbreak;} \\t\\t\\tcase java.math.BigDecimal.ROUND_HALF_EVEN : \\t\\t\\t\\t{ \\t\\t\\t\\t\\tdouble fraction = unscaled - org.apache.commons.math.util.FastMath.floor(unscaled); \\t\\t\\t\\t\\tif (fraction > 0.5) { \\t\\t\\t\\t\\t\\tunscaled = org.apache.commons.math.util.FastMath.ceil(unscaled);} else if (fraction < 0.5) { \\t\\t\\t\\t\\t\\tunscaled = org.apache.commons.math.util.FastMath.floor(unscaled);} else if ((org.apache.commons.math.util.FastMath.floor(unscaled) \\\/ 2.0) == org.apache.commons.math.util.FastMath.floor(java.lang.Math.floor(unscaled) \\\/ 2.0)) { \\t\\t\\t\\t\\t\\tunscaled = org.apache.commons.math.util.FastMath.floor(unscaled);} else { \\t\\t\\t\\t\\t\\tunscaled = org.apache.commons.math.util.FastMath.ceil(unscaled);} \\t\\t\\t\\t\\tbreak;} \\t\\t\\tcase java.math.BigDecimal.ROUND_HALF_UP : \\t\\t\\t\\t{ \\t\\t\\t\\t\\tunscaled = org.apache.commons.math.util.FastMath.nextAfter(unscaled, java.lang.Double.POSITIVE_INFINITY); \\t\\t\\t\\t\\tdouble fraction = unscaled - org.apache.commons.math.util.FastMath.floor(unscaled); \\t\\t\\t\\t\\tif (fraction >= 0.5) { \\t\\t\\t\\t\\t\\tunscaled = org.apache.commons.math.util.FastMath.ceil(unscaled);} else { \\t\\t\\t\\t\\t\\tunscaled = org.apache.commons.math.util.FastMath.floor(unscaled);} \\t\\t\\t\\t\\tbreak;} \\t\\t\\tcase java.math.BigDecimal.ROUND_UNNECESSARY : \\t\\t\\t\\tif (unscaled != org.apache.commons.math.util.FastMath.floor(unscaled)) { \\t\\t\\t\\t\\tthrow new java.lang.ArithmeticException(\\\"Inexact result from rounding\\\");} \\t\\t\\t\\tbreak; \\t\\t\\tcase java.math.BigDecimal.ROUND_UP : \\t\\t\\t\\tunscaled = org.apache.commons.math.util.FastMath.ceil(org.apache.commons.math.util.FastMath.nextAfter(unscaled, java.lang.Double.POSITIVE_INFINITY)); \\t\\t\\t\\tbreak; \\t\\t\\tdefault : \\t\\t\\t\\tthrow org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(org.apache.commons.math.exception.util.LocalizedFormats.INVALID_ROUNDING_METHOD, roundingMethod, \\\"ROUND_CEILING\\\", java.math.BigDecimal.ROUND_CEILING, \\\"ROUND_DOWN\\\", java.math.BigDecimal.ROUND_DOWN, \\\"ROUND_FLOOR\\\", java.math.BigDecimal.ROUND_FLOOR, \\\"ROUND_HALF_DOWN\\\", java.math.BigDecimal.ROUND_HALF_DOWN, \\\"ROUND_HALF_EVEN\\\", java.math.BigDecimal.ROUND_HALF_EVEN, \\\"ROUND_HALF_UP\\\", java.math.BigDecimal.ROUND_HALF_UP, \\\"ROUND_UNNECESSARY\\\", java.math.BigDecimal.ROUND_UNNECESSARY, \\\"ROUND_UP\\\", java.math.BigDecimal.ROUND_UP);} \\t\\treturn unscaled;} \\tpublic static byte sign(final byte x) { \\t\\treturn x == org.apache.commons.math.util.MathUtils.ZB ? org.apache.commons.math.util.MathUtils.ZB : x > org.apache.commons.math.util.MathUtils.ZB ? org.apache.commons.math.util.MathUtils.PB : org.apache.commons.math.util.MathUtils.NB;} \\tpublic static double sign(final double x) { \\t\\tif (java.lang.Double.isNaN(x)) { \\t\\t\\treturn java.lang.Double.NaN;} \\t\\treturn x == 0.0 ? 0.0 : x > 0.0 ? 1.0 : -1.0;\\n\\n"}]}