{"general":{"NR_RIGHT_COMPILATIONS":6,"NR_ERRONEOUS_VARIANCES":null,"EXECUTION_IDENTIFIER":"Math-56","OUTPUT_STATUS":"STOP_BY_PATCH_FOUND","NR_FAILLING_COMPILATIONS":null,"NR_GENERATIONS":6,"TOTAL_TIME":197.272,"NR_FAILING_VALIDATION_PROCESS":null},"patches":[{"VARIANT_ID":"12","VALIDATION":"|true|0|2400|[]|","patchhunks":[{"LOCATION":"org.apache.commons.math.util.MultidimensionalCounter","PATH":"\\\/tmp\\\/figra_Defects4J_Math_56\\\/src\\\/main\\\/java\\\/org\\\/apache\\\/commons\\\/math\\\/util\\\/MultidimensionalCounter.java","INGREDIENT_SCOPE":"-","SUSPICIOUNESS":"0.707","INGREDIENT_PARENT":"java.math.BigDecimal.ROUND_DOWN","PATCH_HUNK_TYPE":"CtFieldReadImpl|CtOperatorAssignmentImpl","ORIGINAL_CODE":"idx","BUGGY_CODE_TYPE":"CtVariableReadImpl|CtOperatorAssignmentImpl","OPERATOR":"ExpressionReplaceOperator","MODIFIED_FILE_PATH":"\\\/tmp\\\/figra_Defects4J_Math_56\\\/.\\\/output_astor\\\/AstorMain-Math-56\\\/\\\/src\\\/\\\/variant-12\\\/org\\\/apache\\\/commons\\\/math\\\/util\\\/MultidimensionalCounter.java","LINE":"239","MP_RANKING":"25","PATCH_HUNK_CODE":"java.math.BigDecimal.ROUND_DOWN"}],"TIME":"197","GENERATION":"6","FOLDER_SOLUTION_CODE":"\\\/tmp\\\/figra_Defects4J_Math_56\\\/.\\\/output_astor\\\/AstorMain-Math-56\\\/\\\/src\\\/\\\/variant-12","PATCH_DIFF_ORIG":"--- \\\/tmp\\\/figra_Defects4J_Math_56\\\/src\\\/main\\\/java\\\/org\\\/apache\\\/commons\\\/math\\\/util\\\/MultidimensionalCounterjava\\n+++ \\\/tmp\\\/figra_Defects4J_Math_56\\\/src\\\/main\\\/java\\\/org\\\/apache\\\/commons\\\/math\\\/util\\\/MultidimensionalCounterjava\\n@@ -239,5 +239 @@\\n-\\t\\t\\tcount += idx;\\n-\\t\\t\\t++idx;\\n-\\t\\t} \\n-\\t\\t--idx;\\n-\\t\\tindices[last] = idx;\\n+\\t\\t\\tcount += \\n@@ -245,2 +240,0 @@\\n-\\t\\treturn indices;\\n-\\t}\\n@@ -259,15 +252,0 @@\\n-\\tpublic int getCount(int... c) throws org.apache.commons.math.exception.OutOfRangeException {\\n-\\t\\tif (c.length != dimension) {\\n-\\t\\t\\tthrow new org.apache.commons.math.exception.DimensionMismatchException(c.length, dimension);\\n-\\t\\t}\\n-\\t\\tint count = 0;\\n-\\t\\tfor (int i = 0; i < dimension; i++) {\\n-\\t\\t\\tfinal int index = c[i];\\n-\\t\\t\\tif ((index < 0) || \\n-\\t\\t\\t(index >= size[i])) {\\n-\\t\\t\\t\\tthrow new org.apache.commons.math.exception.OutOfRangeException(index, 0, size[i] - 1);\\n-\\t\\t\\t}\\n-\\t\\t\\tcount += uniCounterOffset[i] * c[i];\\n-\\t\\t}\\n-\\t\\treturn count + c[last];\\n-\\t}\\n@@ -280,3 +258,0 @@\\n-\\tpublic int getSize() {\\n-\\t\\treturn totalSize;\\n-\\t}\\n@@ -288,3 +263,0 @@\\n-\\tpublic int[] getSizes() {\\n-\\t\\treturn org.apache.commons.math.util.MathUtils.copyOf(size);\\n-\\t}\\n@@ -295,8 +268,1150 @@\\n-\\t@java.lang.Override\\n-\\tpublic java.lang.String toString() {\\n-\\t\\tfinal java.lang.StringBuilder sb = new java.lang.StringBuilder();\\n-\\t\\tfor (int i = 0; i < dimension; i++) {\\n-\\t\\t\\tsb.append(\\\"[\\\").append(getCount(i)).append(\\\"]\\\");\\n-\\t\\t}\\n-\\t\\treturn sb.toString();\\n-\\t}}\\n\\\\ No newline at end of file\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\t\\tjava.math.BigDecimal.ROUND_DOWN; \\t\\t\\t++idx;} \\t\\t--idx; \\t\\tindices[last] = idx; \\t\\treturn indices;} \\tpublic int getCount(int... c) throws org.apache.commons.math.exception.OutOfRangeException { \\t\\tif (c.length != dimension) { \\t\\t\\tthrow new org.apache.commons.math.exception.DimensionMismatchException(c.length, dimension);} \\t\\tint count = 0; \\t\\tfor (int i = 0; i < dimension; i++) { \\t\\t\\tfinal int index = c[i]; \\t\\t\\tif ((index < 0) || (index >= size[i])) { \\t\\t\\t\\tthrow new org.apache.commons.math.exception.OutOfRangeException(index, 0, size[i] - 1);} \\t\\t\\tcount += uniCounterOffset[i] * c[i];} \\t\\treturn count + c[last];} \\tpublic int getSize() { \\t\\treturn totalSize;} \\tpublic int[] getSizes() { \\t\\treturn org.apache.commons.math.util.MathUtils.copyOf(size);} \\t@java.lang.Override \\tpublic java.lang.String toString() { \\t\\tfinal java.lang.StringBuilder sb = new java.lang.StringBuilder(); \\t\\tfor (int i = 0; i < dimension; i++) { \\t\\t\\tsb.append(\\\"[\\\").append(getCount(i)).append(\\\"]\\\");} \\t\\treturn sb.toString();}}\\n\\\\ No newline at end of file\\n\\n"}]}