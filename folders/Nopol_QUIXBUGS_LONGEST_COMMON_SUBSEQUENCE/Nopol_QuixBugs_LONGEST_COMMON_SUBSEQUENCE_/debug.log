07:53:08.263 fr.inria.lille.repair.nopol.NoPol - Source files: [src/main/java]
07:53:08.265 fr.inria.lille.repair.nopol.NoPol - Classpath: [file:/users2/cpca56132020/moliveira/folders/Nopol_QUIXBUGS_LONGEST_COMMON_SUBSEQUENCE/Nopol_QuixBugs_LONGEST_COMMON_SUBSEQUENCE_/target/classes/, file:/users2/cpca56132020/moliveira/folders/Nopol_QUIXBUGS_LONGEST_COMMON_SUBSEQUENCE/Nopol_QuixBugs_LONGEST_COMMON_SUBSEQUENCE_/target/test-classes/, file:/users2/cpca56132020/moliveira/.m2/repository/junit/junit/4.11/junit-4.11.jar, file:/users2/cpca56132020/moliveira/.m2/repository/org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.jar, file:/users2/cpca56132020/moliveira/RepairThemAll/script/../repair_tools/nopol.jar]
07:53:08.265 fr.inria.lille.repair.nopol.NoPol - Statement type: PRE_THEN_COND
07:53:08.266 fr.inria.lille.repair.nopol.NoPol - Args: [java_testcases.junit.LONGEST_COMMON_SUBSEQUENCE_Test]
07:53:08.268 fr.inria.lille.repair.nopol.NoPol - Config: Config{synthesisDepth=3, collectStaticMethods=true, collectStaticFields=false, collectLiterals=false, onlyOneSynthesisResult=true, sortExpressions=true, maxLineInvocationPerTest=250, timeoutMethodInvocation=2000, dataCollectionTimeoutInSecondForSynthesis=900, addWeight=0.19478, subWeight=0.04554, mulWeight=0.0102, divWeight=0.00613, andWeight=0.10597, orWeight=0.05708, eqWeight=0.22798, nEqWeight=0.0, lessEqWeight=0.0255, lessWeight=0.0947, methodCallWeight=0.1, fieldAccessWeight=0.08099, constantWeight=0.14232, variableWeight=0.05195, mode=REPAIR, type=PRE_THEN_COND, synthesis=SMT, oracle=ANGELIC, solver=Z3, solverPath='/users2/cpca56132020/moliveira/RepairThemAll/script/../libs/z3/build/z3', projectSources=[src/main/java], projectClasspath='[Ljava.net.URL;@16c0663d', projectTests=[java_testcases.junit.LONGEST_COMMON_SUBSEQUENCE_Test], complianceLevel=8, outputFolder=., json=true}
07:53:08.268 fr.inria.lille.repair.nopol.NoPol - Available processors (cores): 1
07:53:08.271 fr.inria.lille.repair.nopol.NoPol - Free memory: 968 MB
07:53:08.271 fr.inria.lille.repair.nopol.NoPol - Maximum memory: 3 GB
07:53:08.271 fr.inria.lille.repair.nopol.NoPol - Total memory available to JVM: 989 MB
07:53:08.271 fr.inria.lille.repair.nopol.NoPol - Java version: 1.8.0_282
07:53:08.277 fr.inria.lille.repair.nopol.NoPol - JAVA_HOME: /users2/cpca56132020/moliveira/deps/jdk-8/bin
07:53:08.277 fr.inria.lille.repair.nopol.NoPol - PATH: /users2/cpca56132020/moliveira/deps/jdk-8/bin:/users2/cpca56132020/moliveira/deps/Maven/apache-maven/bin:/users2/cpca56132020/moliveira/deps/Gradle/gradle-6.8.3/bin:/usr/condabin:/usr/local/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/users2/cpca56132020/moliveira/.local/bin:/users2/cpca56132020/moliveira/bin
07:53:16.007 fr.inria.lille.repair.nopol.NoPol - statement #1
07:53:16.008 fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation java_testcases.junit.QuixFixOracleHelper:39 which is executed by 9 tests
07:53:16.008 fr.inria.lille.repair.nopol.NoPol - cannot spoon SourceLocation java_testcases.junit.QuixFixOracleHelper:39
07:53:16.008 fr.inria.lille.repair.nopol.NoPol - statement #2
07:53:16.008 fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation java_programs.LONGEST_COMMON_SUBSEQUENCE:22 which is executed by 10 tests
07:53:16.156 fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
07:53:16.948 x.java.compiler.DynamicClassCompiler - [Compilation errors]
LONGEST_COMMON_SUBSEQUENCE.java:32: error: missing return statement
    }
    ^
07:53:16.951 f.i.l.r.n.s.ConstraintModelBuilder - Unable to compile the change: 
public class LONGEST_COMMON_SUBSEQUENCE {
    public static java.lang.String longest_common_subsequence(java.lang.String a, java.lang.String b) {
        if (a.isEmpty() || b.isEmpty()) {
            return "";
        } else
            if (a.charAt(0) == b.charAt(0)) {
                return a.charAt(0) + java_programs.LONGEST_COMMON_SUBSEQUENCE.longest_common_subsequence(a.substring(1), b);
            } else {
                java.lang.String fst = java_programs.LONGEST_COMMON_SUBSEQUENCE.longest_common_subsequence(a, b.substring(1));
                java.lang.String snd = java_programs.LONGEST_COMMON_SUBSEQUENCE.longest_common_subsequence(a.substring(1), b);
                boolean spoonDefaultValue = false;
                try {
                    spoonDefaultValue = true;
                } catch (java.lang.Exception __NopolProcessorException) {
                }
                boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                if (fr.inria.lille.commons.trace.RuntimeValues.instance(0).isEnabled()) {
                    fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectionStarts();
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("snd",snd);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("a",a);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("b",b);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("fst",fst);} catch (Exception ex1) {ex1.printStackTrace();};
                    fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectOutput(runtimeAngelicValue);
                    fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectionEnds();
                }
                if (runtimeAngelicValue)
                    return fst.length() >= snd.length() ? fst : snd;

            }

    }
}
07:53:16.953 fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
07:53:16.953 fr.inria.lille.repair.nopol.NoPol - statement #3
07:53:16.953 fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation java_programs.LONGEST_COMMON_SUBSEQUENCE:21 which is executed by 10 tests
07:53:17.018 fr.inria.lille.repair.nopol.NoPol - statement #4
07:53:17.018 fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation java_programs.LONGEST_COMMON_SUBSEQUENCE:20 which is executed by 10 tests
07:53:17.085 fr.inria.lille.repair.nopol.NoPol - statement #5
07:53:17.085 fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation java_programs.LONGEST_COMMON_SUBSEQUENCE:18 which is executed by 10 tests
07:53:17.168 fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
07:53:17.713 x.java.compiler.DynamicClassCompiler - [Compilation errors]
LONGEST_COMMON_SUBSEQUENCE.java:30: error: missing return statement
    }
    ^
07:53:17.728 f.i.l.r.n.s.ConstraintModelBuilder - Unable to compile the change: 
public class LONGEST_COMMON_SUBSEQUENCE {
    public static java.lang.String longest_common_subsequence(java.lang.String a, java.lang.String b) {
        if (a.isEmpty() || b.isEmpty()) {
            return "";
        } else
            if (a.charAt(0) == b.charAt(0)) {
                boolean spoonDefaultValue = false;
                try {
                    spoonDefaultValue = true;
                } catch (java.lang.Exception __NopolProcessorException) {
                }
                boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                if (fr.inria.lille.commons.trace.RuntimeValues.instance(1).isEnabled()) {
                    fr.inria.lille.commons.trace.RuntimeValues.instance(1).collectionStarts();
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(1).collectInput("a",a);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(1).collectInput("b",b);} catch (Exception ex1) {ex1.printStackTrace();};
                    fr.inria.lille.commons.trace.RuntimeValues.instance(1).collectOutput(runtimeAngelicValue);
                    fr.inria.lille.commons.trace.RuntimeValues.instance(1).collectionEnds();
                }
                if (runtimeAngelicValue)
                    return a.charAt(0) + java_programs.LONGEST_COMMON_SUBSEQUENCE.longest_common_subsequence(a.substring(1), b);

            } else {
                java.lang.String fst = java_programs.LONGEST_COMMON_SUBSEQUENCE.longest_common_subsequence(a, b.substring(1));
                java.lang.String snd = java_programs.LONGEST_COMMON_SUBSEQUENCE.longest_common_subsequence(a.substring(1), b);
                return fst.length() >= snd.length() ? fst : snd;
            }

    }
}
07:53:17.730 fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
07:53:17.730 fr.inria.lille.repair.nopol.NoPol - statement #6
07:53:17.730 fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation java_programs.LONGEST_COMMON_SUBSEQUENCE:17 which is executed by 10 tests
07:53:17.777 fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
07:53:18.120 x.java.compiler.DynamicClassCompiler - [Compilation errors]
LONGEST_COMMON_SUBSEQUENCE.java:29: error: missing return statement
    }
    ^
07:53:18.133 f.i.l.r.n.s.ConstraintModelBuilder - Unable to compile the change: 
public class LONGEST_COMMON_SUBSEQUENCE {
    public static java.lang.String longest_common_subsequence(java.lang.String a, java.lang.String b) {
        if (a.isEmpty() || b.isEmpty()) {
            return "";
        } else {
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(2).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(2).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(2).collectInput("0",0);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(2).collectInput("a",a);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(2).collectInput("b",b);} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(2).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(2).collectionEnds();
            }
            if (runtimeAngelicValue) if (a.charAt(0) == b.charAt(0)) {
                return a.charAt(0) + java_programs.LONGEST_COMMON_SUBSEQUENCE.longest_common_subsequence(a.substring(1), b);
            } else {
                java.lang.String fst = java_programs.LONGEST_COMMON_SUBSEQUENCE.longest_common_subsequence(a, b.substring(1));
                java.lang.String snd = java_programs.LONGEST_COMMON_SUBSEQUENCE.longest_common_subsequence(a.substring(1), b);
                return fst.length() >= snd.length() ? fst : snd;
            }
        }
    }
}
07:53:18.133 fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
07:53:18.133 fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
07:53:22.802 tests.output - Failing tests with false: 
[test_7(java_testcases.junit.LONGEST_COMMON_SUBSEQUENCE_Test): expected:<[BCBA]> but was:<[]>, test_5(java_testcases.junit.LONGEST_COMMON_SUBSEQUENCE_Test): expected:<[bcba]> but was:<[]>, test_6(java_testcases.junit.LONGEST_COMMON_SUBSEQUENCE_Test): expected:<[TAAG]> but was:<[]>, test_3(java_testcases.junit.LONGEST_COMMON_SUBSEQUENCE_Test): test timed out after 3000 milliseconds]
07:53:22.802 tests.output - Failing tests with true: 
[test_7(java_testcases.junit.LONGEST_COMMON_SUBSEQUENCE_Test): expected:<[BCBA]> but was:<[ABCBDAB]>, test_5(java_testcases.junit.LONGEST_COMMON_SUBSEQUENCE_Test): expected:<[bcba]> but was:<[abcbdab]>, test_6(java_testcases.junit.LONGEST_COMMON_SUBSEQUENCE_Test): expected:<TA[AG]> but was:<TA[TAGC]>, test_3(java_testcases.junit.LONGEST_COMMON_SUBSEQUENCE_Test): expected:<t[si]test> but was:<t[hisisa]test>]
07:53:22.802 f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation java_programs.LONGEST_COMMON_SUBSEQUENCE:17.
07:53:22.802 fr.inria.lille.repair.nopol.NoPol - statement #7
07:53:22.803 fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation java_programs.LONGEST_COMMON_SUBSEQUENCE:16 which is executed by 10 tests
07:53:22.849 fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
07:53:23.344 x.java.compiler.DynamicClassCompiler - [Compilation errors]
LONGEST_COMMON_SUBSEQUENCE.java:30: error: missing return statement
    }
    ^
07:53:23.354 f.i.l.r.n.s.ConstraintModelBuilder - Unable to compile the change: 
public class LONGEST_COMMON_SUBSEQUENCE {
    public static java.lang.String longest_common_subsequence(java.lang.String a, java.lang.String b) {
        if (a.isEmpty() || b.isEmpty()) {
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(4).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(4).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(4).collectInput("a",a);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(4).collectInput("b",b);} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(4).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(4).collectionEnds();
            }
            if (runtimeAngelicValue)
                return "";

        } else
            if (a.charAt(0) == b.charAt(0)) {
                return a.charAt(0) + java_programs.LONGEST_COMMON_SUBSEQUENCE.longest_common_subsequence(a.substring(1), b);
            } else {
                java.lang.String fst = java_programs.LONGEST_COMMON_SUBSEQUENCE.longest_common_subsequence(a, b.substring(1));
                java.lang.String snd = java_programs.LONGEST_COMMON_SUBSEQUENCE.longest_common_subsequence(a.substring(1), b);
                return fst.length() >= snd.length() ? fst : snd;
            }

    }
}
07:53:23.354 fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
07:53:23.354 fr.inria.lille.repair.nopol.NoPol - statement #8
07:53:23.355 fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation java_programs.LONGEST_COMMON_SUBSEQUENCE:15 which is executed by 10 tests
07:53:23.402 fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
07:53:23.730 tests.output - Failing tests with false: 
[test_7(java_testcases.junit.LONGEST_COMMON_SUBSEQUENCE_Test): String index out of range: 0, test_5(java_testcases.junit.LONGEST_COMMON_SUBSEQUENCE_Test): String index out of range: 0, test_6(java_testcases.junit.LONGEST_COMMON_SUBSEQUENCE_Test): String index out of range: 0, test_3(java_testcases.junit.LONGEST_COMMON_SUBSEQUENCE_Test): String index out of range: 0]
07:53:23.730 tests.output - Failing tests with true: 
[test_7(java_testcases.junit.LONGEST_COMMON_SUBSEQUENCE_Test): expected:<[BCBA]> but was:<[]>, test_5(java_testcases.junit.LONGEST_COMMON_SUBSEQUENCE_Test): expected:<[bcba]> but was:<[]>, test_6(java_testcases.junit.LONGEST_COMMON_SUBSEQUENCE_Test): expected:<[TAAG]> but was:<[]>, test_3(java_testcases.junit.LONGEST_COMMON_SUBSEQUENCE_Test): expected:<[tsitest]> but was:<[]>]
07:53:23.730 f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation java_programs.LONGEST_COMMON_SUBSEQUENCE:15.
07:53:23.730 fr.inria.lille.repair.nopol.NoPol - statement #9
07:53:23.731 fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation java_testcases.junit.QuixFixOracleHelper:57 which is executed by 10 tests
07:53:23.731 fr.inria.lille.repair.nopol.NoPol - cannot spoon SourceLocation java_testcases.junit.QuixFixOracleHelper:57
07:53:23.731 fr.inria.lille.repair.nopol.NoPol - statement #10
07:53:23.731 fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation java_testcases.junit.QuixFixOracleHelper:52 which is executed by 10 tests
07:53:23.731 fr.inria.lille.repair.nopol.NoPol - cannot spoon SourceLocation java_testcases.junit.QuixFixOracleHelper:52
07:53:23.731 fr.inria.lille.repair.nopol.NoPol - statement #11
07:53:23.731 fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation java_testcases.junit.QuixFixOracleHelper:50 which is executed by 10 tests
07:53:23.731 fr.inria.lille.repair.nopol.NoPol - cannot spoon SourceLocation java_testcases.junit.QuixFixOracleHelper:50
07:53:23.731 fr.inria.lille.repair.nopol.NoPol - statement #12
07:53:23.731 fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation java_testcases.junit.QuixFixOracleHelper:44 which is executed by 10 tests
07:53:23.731 fr.inria.lille.repair.nopol.NoPol - cannot spoon SourceLocation java_testcases.junit.QuixFixOracleHelper:44
07:53:23.731 fr.inria.lille.repair.nopol.NoPol - statement #13
07:53:23.731 fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation java_testcases.junit.QuixFixOracleHelper:38 which is executed by 10 tests
07:53:23.731 fr.inria.lille.repair.nopol.NoPol - cannot spoon SourceLocation java_testcases.junit.QuixFixOracleHelper:38
07:53:23.731 fr.inria.lille.repair.nopol.NoPol - statement #14
07:53:23.731 fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation java_testcases.junit.QuixFixOracleHelper:37 which is executed by 10 tests
07:53:23.731 fr.inria.lille.repair.nopol.NoPol - cannot spoon SourceLocation java_testcases.junit.QuixFixOracleHelper:37
07:53:23.731 fr.inria.lille.repair.nopol.NoPol - statement #15
07:53:23.731 fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation java_testcases.junit.QuixFixOracleHelper:26 which is executed by 10 tests
07:53:23.731 fr.inria.lille.repair.nopol.NoPol - cannot spoon SourceLocation java_testcases.junit.QuixFixOracleHelper:26
07:53:23.731 fr.inria.lille.repair.nopol.NoPol - statement #16
07:53:23.731 fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation java_testcases.junit.QuixFixOracleHelper:22 which is executed by 10 tests
07:53:23.731 fr.inria.lille.repair.nopol.NoPol - cannot spoon SourceLocation java_testcases.junit.QuixFixOracleHelper:22
07:53:23.731 fr.inria.lille.repair.nopol.NoPol - statement #17
07:53:23.731 fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation java_testcases.junit.QuixFixOracleHelper:21 which is executed by 10 tests
07:53:23.731 fr.inria.lille.repair.nopol.NoPol - cannot spoon SourceLocation java_testcases.junit.QuixFixOracleHelper:21
07:53:23.732 fr.inria.lille.repair.nopol.NoPol - statement #18
07:53:23.732 fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation java_testcases.junit.QuixFixOracleHelper:16 which is executed by 10 tests
07:53:23.732 fr.inria.lille.repair.nopol.NoPol - cannot spoon SourceLocation java_testcases.junit.QuixFixOracleHelper:16
07:53:23.732 fr.inria.lille.repair.nopol.NoPol - statement #19
07:53:23.732 fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation java_testcases.junit.QuixFixOracleHelper:15 which is executed by 10 tests
07:53:23.732 fr.inria.lille.repair.nopol.NoPol - cannot spoon SourceLocation java_testcases.junit.QuixFixOracleHelper:15
07:53:23.732 fr.inria.lille.repair.nopol.NoPol - statement #20
07:53:23.732 fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation java_testcases.junit.QuixFixOracleHelper:14 which is executed by 10 tests
07:53:23.732 fr.inria.lille.repair.nopol.NoPol - cannot spoon SourceLocation java_testcases.junit.QuixFixOracleHelper:14
07:53:23.732 fr.inria.lille.repair.nopol.NoPol - ----INFORMATION----
07:53:23.735 fr.inria.lille.repair.nopol.NoPol - Nb classes : 3
07:53:23.735 fr.inria.lille.repair.nopol.NoPol - Nb methods : 9
07:53:23.735 fr.inria.lille.repair.nopol.NoPol - Nb Statements Analyzed : 6
07:53:23.735 fr.inria.lille.repair.nopol.NoPol - Nb Statements with Angelic Value Found : 0
07:53:23.735 fr.inria.lille.repair.nopol.NoPol - Nb inputs in SMT : 0
07:53:23.736 fr.inria.lille.repair.nopol.NoPol - Nb SMT level: 0
07:53:23.736 fr.inria.lille.repair.nopol.NoPol - Nb variables in SMT : 0
07:53:23.736 fr.inria.lille.repair.nopol.NoPol - NoPol Execution time : 15471ms
07:53:23.736 fr.inria.lille.repair.nopol.NoPol - 
