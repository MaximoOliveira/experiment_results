07:35:53.177 fr.inria.lille.repair.nopol.NoPol - Source files: [src/main/java]
07:35:53.180 fr.inria.lille.repair.nopol.NoPol - Classpath: [file:/users2/cpca56132020/moliveira/folders/Nopol_QUIXBUGS_KTH/Nopol_QuixBugs_KTH_/target/classes/, file:/users2/cpca56132020/moliveira/folders/Nopol_QUIXBUGS_KTH/Nopol_QuixBugs_KTH_/target/test-classes/, file:/users2/cpca56132020/moliveira/.m2/repository/junit/junit/4.11/junit-4.11.jar, file:/users2/cpca56132020/moliveira/.m2/repository/org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.jar, file:/users2/cpca56132020/moliveira/RepairThemAll/script/../repair_tools/nopol.jar]
07:35:53.180 fr.inria.lille.repair.nopol.NoPol - Statement type: PRE_THEN_COND
07:35:53.180 fr.inria.lille.repair.nopol.NoPol - Args: [java_testcases.junit.KTH_Test]
07:35:53.182 fr.inria.lille.repair.nopol.NoPol - Config: Config{synthesisDepth=3, collectStaticMethods=true, collectStaticFields=false, collectLiterals=false, onlyOneSynthesisResult=true, sortExpressions=true, maxLineInvocationPerTest=250, timeoutMethodInvocation=2000, dataCollectionTimeoutInSecondForSynthesis=900, addWeight=0.19478, subWeight=0.04554, mulWeight=0.0102, divWeight=0.00613, andWeight=0.10597, orWeight=0.05708, eqWeight=0.22798, nEqWeight=0.0, lessEqWeight=0.0255, lessWeight=0.0947, methodCallWeight=0.1, fieldAccessWeight=0.08099, constantWeight=0.14232, variableWeight=0.05195, mode=REPAIR, type=PRE_THEN_COND, synthesis=SMT, oracle=ANGELIC, solver=Z3, solverPath='/users2/cpca56132020/moliveira/RepairThemAll/script/../libs/z3/build/z3', projectSources=[src/main/java], projectClasspath='[Ljava.net.URL;@16c0663d', projectTests=[java_testcases.junit.KTH_Test], complianceLevel=8, outputFolder=., json=true}
07:35:53.183 fr.inria.lille.repair.nopol.NoPol - Available processors (cores): 1
07:35:53.186 fr.inria.lille.repair.nopol.NoPol - Free memory: 968 MB
07:35:53.186 fr.inria.lille.repair.nopol.NoPol - Maximum memory: 3 GB
07:35:53.186 fr.inria.lille.repair.nopol.NoPol - Total memory available to JVM: 989 MB
07:35:53.186 fr.inria.lille.repair.nopol.NoPol - Java version: 1.8.0_282
07:35:53.189 fr.inria.lille.repair.nopol.NoPol - JAVA_HOME: /users2/cpca56132020/moliveira/deps/jdk-8/bin
07:35:53.190 fr.inria.lille.repair.nopol.NoPol - PATH: /users2/cpca56132020/moliveira/deps/jdk-8/bin:/users2/cpca56132020/moliveira/deps/Maven/apache-maven/bin:/users2/cpca56132020/moliveira/deps/Gradle/gradle-6.8.3/bin:/usr/condabin:/usr/local/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/users2/cpca56132020/moliveira/.local/bin:/users2/cpca56132020/moliveira/bin
07:35:56.174 fr.inria.lille.repair.nopol.NoPol - statement #1
07:35:56.174 fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation java_programs.KTH:25 which is executed by 4 tests
07:35:56.346 fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
07:35:57.106 x.java.compiler.DynamicClassCompiler - [Compilation errors]
KTH.java:47: error: missing return statement
    }
    ^
07:35:57.130 f.i.l.r.n.s.ConstraintModelBuilder - Unable to compile the change: 
public class KTH {
    public static java.lang.Integer kth(java.util.ArrayList<java.lang.Integer> arr, int k) {
        int pivot = arr.get(0);
        java.util.ArrayList<java.lang.Integer> below;
        java.util.ArrayList<java.lang.Integer> above;
        below = new java.util.ArrayList<java.lang.Integer>(arr.size());
        above = new java.util.ArrayList<java.lang.Integer>(arr.size());
        for (java.lang.Integer x : arr) {
            if (x < pivot) {
                below.add(x);
            } else
                if (x > pivot) {
                    above.add(x);
                }

        }
        int num_less = below.size();
        int num_lessoreq = arr.size() - above.size();
        if (k < num_less) {
            return java_programs.KTH.kth(below, k);
        } else
            if (k >= num_lessoreq) {
                boolean spoonDefaultValue = false;
                try {
                    spoonDefaultValue = true;
                } catch (java.lang.Exception __NopolProcessorException) {
                }
                boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                if (fr.inria.lille.commons.trace.RuntimeValues.instance(0).isEnabled()) {
                    fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectionStarts();
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("arr",arr);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("pivot",pivot);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("k",k);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("num_less",num_less);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("num_lessoreq",num_lessoreq);} catch (Exception ex1) {ex1.printStackTrace();};
                    fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectOutput(runtimeAngelicValue);
                    fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectionEnds();
                }
                if (runtimeAngelicValue)
                    return java_programs.KTH.kth(above, k);

            } else {
                return pivot;
            }

    }
}
07:35:57.130 fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
07:35:57.130 fr.inria.lille.repair.nopol.NoPol - statement #2
07:35:57.130 fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation java_programs.KTH:16 which is executed by 6 tests
07:35:57.228 fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
07:35:57.630 tests.output - Failing tests with false: 
[test_1(java_testcases.junit.KTH_Test): expected:<7> but was:<3>, test_0(java_testcases.junit.KTH_Test): expected:<5> but was:<1>, test_5(java_testcases.junit.KTH_Test): expected:<6> but was:<2>, test_6(java_testcases.junit.KTH_Test): expected:<322> but was:<45>]
07:35:57.631 tests.output - Failing tests with true: 
[test_1(java_testcases.junit.KTH_Test): Index: 0, Size: 0, test_0(java_testcases.junit.KTH_Test): Index: 0, Size: 0, test_5(java_testcases.junit.KTH_Test): Index: 0, Size: 0, test_6(java_testcases.junit.KTH_Test): Index: 0, Size: 0]
07:35:57.631 f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation java_programs.KTH:16.
07:35:57.632 fr.inria.lille.repair.nopol.NoPol - statement #3
07:35:57.632 fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation java_programs.KTH:24 which is executed by 7 tests
07:35:57.725 fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
07:35:58.187 x.java.compiler.DynamicClassCompiler - [Compilation errors]
KTH.java:46: error: missing return statement
    }
    ^
07:35:58.190 f.i.l.r.n.s.ConstraintModelBuilder - Unable to compile the change: 
public class KTH {
    public static java.lang.Integer kth(java.util.ArrayList<java.lang.Integer> arr, int k) {
        int pivot = arr.get(0);
        java.util.ArrayList<java.lang.Integer> below;
        java.util.ArrayList<java.lang.Integer> above;
        below = new java.util.ArrayList<java.lang.Integer>(arr.size());
        above = new java.util.ArrayList<java.lang.Integer>(arr.size());
        for (java.lang.Integer x : arr) {
            if (x < pivot) {
                below.add(x);
            } else
                if (x > pivot) {
                    above.add(x);
                }

        }
        int num_less = below.size();
        int num_lessoreq = arr.size() - above.size();
        if (k < num_less) {
            return java_programs.KTH.kth(below, k);
        } else {
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(2).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(2).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(2).collectInput("arr",arr);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(2).collectInput("pivot",pivot);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(2).collectInput("k",k);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(2).collectInput("num_less",num_less);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(2).collectInput("k >= num_lessoreq",k >= num_lessoreq);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(2).collectInput("num_lessoreq",num_lessoreq);} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(2).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(2).collectionEnds();
            }
            if (runtimeAngelicValue) if (k >= num_lessoreq) {
                return java_programs.KTH.kth(above, k);
            } else {
                return pivot;
            }
        }
    }
}
07:35:58.196 fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
07:35:58.196 fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
07:35:58.472 tests.output - Failing tests with false: 
[test_1(java_testcases.junit.KTH_Test): expected:<7> but was:<3>, test_0(java_testcases.junit.KTH_Test): expected:<5> but was:<1>, test_5(java_testcases.junit.KTH_Test): expected:<6> but was:<2>, test_6(java_testcases.junit.KTH_Test): expected:<322> but was:<45>]
07:35:58.473 tests.output - Failing tests with true: 
[test_1(java_testcases.junit.KTH_Test): Index: 0, Size: 0, test_0(java_testcases.junit.KTH_Test): Index: 0, Size: 0, test_5(java_testcases.junit.KTH_Test): Index: 0, Size: 0, test_6(java_testcases.junit.KTH_Test): Index: 0, Size: 0]
07:35:58.473 f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation java_programs.KTH:24.
07:35:58.473 fr.inria.lille.repair.nopol.NoPol - statement #4
07:35:58.473 fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation java_programs.KTH:22 which is executed by 7 tests
07:35:58.552 fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
07:35:58.830 tests.output - Failing tests with false: 
[test_1(java_testcases.junit.KTH_Test): Index: 0, Size: 0, test_0(java_testcases.junit.KTH_Test): Index: 0, Size: 0, test_5(java_testcases.junit.KTH_Test): expected:<6> but was:<45>, test_6(java_testcases.junit.KTH_Test): Index: 0, Size: 0]
07:35:58.831 tests.output - Failing tests with true: 
[test_1(java_testcases.junit.KTH_Test): Index: 0, Size: 0, test_0(java_testcases.junit.KTH_Test): Index: 0, Size: 0, test_5(java_testcases.junit.KTH_Test): Index: 0, Size: 0, test_6(java_testcases.junit.KTH_Test): Index: 0, Size: 0]
07:35:58.831 f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation java_programs.KTH:22.
07:35:58.832 fr.inria.lille.repair.nopol.NoPol - statement #5
07:35:58.832 fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation java_programs.KTH:21 which is executed by 7 tests
07:35:58.886 fr.inria.lille.repair.nopol.NoPol - statement #6
07:35:58.886 fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation java_programs.KTH:20 which is executed by 7 tests
07:35:58.973 fr.inria.lille.repair.nopol.NoPol - statement #7
07:35:58.973 fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation java_programs.KTH:18 which is executed by 7 tests
07:35:59.048 fr.inria.lille.repair.nopol.NoPol - statement #8
07:35:59.048 fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation java_programs.KTH:15 which is executed by 7 tests
07:35:59.115 fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
07:35:59.365 tests.output - Failing tests with false: 
[test_1(java_testcases.junit.KTH_Test): expected:<7> but was:<3>, test_0(java_testcases.junit.KTH_Test): expected:<5> but was:<1>, test_5(java_testcases.junit.KTH_Test): expected:<6> but was:<2>, test_6(java_testcases.junit.KTH_Test): expected:<322> but was:<45>]
07:35:59.366 tests.output - Failing tests with true: 
[test_1(java_testcases.junit.KTH_Test): Index: 0, Size: 0, test_0(java_testcases.junit.KTH_Test): Index: 0, Size: 0, test_5(java_testcases.junit.KTH_Test): Index: 0, Size: 0, test_6(java_testcases.junit.KTH_Test): Index: 0, Size: 0]
07:35:59.366 f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation java_programs.KTH:15.
07:35:59.366 fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
07:36:09.037 tests.output - Failing tests with false: 
[test_1(java_testcases.junit.KTH_Test): expected:<7> but was:<3>, test_0(java_testcases.junit.KTH_Test): expected:<5> but was:<1>, test_5(java_testcases.junit.KTH_Test): expected:<6> but was:<2>, test_6(java_testcases.junit.KTH_Test): expected:<322> but was:<45>]
07:36:09.037 tests.output - Failing tests with true: 
[test_1(java_testcases.junit.KTH_Test): null, test_0(java_testcases.junit.KTH_Test): test timed out after 3000 milliseconds, test_5(java_testcases.junit.KTH_Test): test timed out after 3000 milliseconds, test_6(java_testcases.junit.KTH_Test): test timed out after 3000 milliseconds]
07:36:09.037 f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation java_programs.KTH:15.
07:36:09.038 fr.inria.lille.repair.nopol.NoPol - statement #9
07:36:09.039 fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation java_programs.KTH:13 which is executed by 7 tests
07:36:09.186 fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
07:36:10.383 tests.output - Failing tests with false: 
[test_1(java_testcases.junit.KTH_Test): expected:<7> but was:<3>, test_0(java_testcases.junit.KTH_Test): expected:<5> but was:<1>, test_5(java_testcases.junit.KTH_Test): expected:<6> but was:<45>, test_6(java_testcases.junit.KTH_Test): expected:<322> but was:<45>]
07:36:10.383 tests.output - Failing tests with true: 
[test_1(java_testcases.junit.KTH_Test): Index: 0, Size: 0, test_0(java_testcases.junit.KTH_Test): Index: 0, Size: 0, test_5(java_testcases.junit.KTH_Test): Index: 0, Size: 0, test_6(java_testcases.junit.KTH_Test): Index: 0, Size: 0]
07:36:10.383 f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation java_programs.KTH:13.
07:36:10.383 fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
07:36:20.809 tests.output - Failing tests with false: 
[test_1(java_testcases.junit.KTH_Test): Index: 0, Size: 0, test_0(java_testcases.junit.KTH_Test): Index: 0, Size: 0, test_5(java_testcases.junit.KTH_Test): expected:<6> but was:<45>, test_6(java_testcases.junit.KTH_Test): Index: 0, Size: 0]
07:36:20.809 tests.output - Failing tests with true: 
[test_1(java_testcases.junit.KTH_Test): null, test_0(java_testcases.junit.KTH_Test): test timed out after 3000 milliseconds, test_5(java_testcases.junit.KTH_Test): test timed out after 3000 milliseconds, test_6(java_testcases.junit.KTH_Test): test timed out after 3000 milliseconds]
07:36:20.809 f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation java_programs.KTH:13.
07:36:20.810 fr.inria.lille.repair.nopol.NoPol - statement #10
07:36:20.810 fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation java_programs.KTH:12 which is executed by 7 tests
07:36:20.982 fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
07:36:22.899 tests.output - Failing tests with false: 
[test_1(java_testcases.junit.KTH_Test): expected:<7> but was:<3>, test_0(java_testcases.junit.KTH_Test): expected:<5> but was:<1>, test_5(java_testcases.junit.KTH_Test): expected:<6> but was:<45>, test_6(java_testcases.junit.KTH_Test): expected:<322> but was:<45>]
07:36:22.899 tests.output - Failing tests with true: 
[test_1(java_testcases.junit.KTH_Test): Index: 0, Size: 0, test_0(java_testcases.junit.KTH_Test): Index: 0, Size: 0, test_5(java_testcases.junit.KTH_Test): Index: 0, Size: 0, test_6(java_testcases.junit.KTH_Test): Index: 0, Size: 0]
07:36:22.899 f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation java_programs.KTH:12.
07:36:22.899 fr.inria.lille.repair.nopol.NoPol - statement #11
07:36:22.899 fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation java_programs.KTH:11 which is executed by 7 tests
07:36:23.062 fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
07:36:24.301 x.java.compiler.DynamicClassCompiler - [Compilation errors]
KTH.java:30: error: variable above might not have been initialized
                    above.add(x);
                    ^
KTH.java:35: error: variable above might not have been initialized
        int num_lessoreq = arr.size() - above.size();
                                        ^
07:36:24.304 f.i.l.r.n.s.ConstraintModelBuilder - Unable to compile the change: 
public class KTH {
    public static java.lang.Integer kth(java.util.ArrayList<java.lang.Integer> arr, int k) {
        int pivot = arr.get(0);
        java.util.ArrayList<java.lang.Integer> below;
        java.util.ArrayList<java.lang.Integer> above;
        below = new java.util.ArrayList<java.lang.Integer>(arr.size());
        boolean spoonDefaultValue = false;
        try {
            spoonDefaultValue = true;
        } catch (java.lang.Exception __NopolProcessorException) {
        }
        boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
        if (fr.inria.lille.commons.trace.RuntimeValues.instance(10).isEnabled()) {
            fr.inria.lille.commons.trace.RuntimeValues.instance(10).collectionStarts();
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(10).collectInput("arr",arr);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(10).collectInput("pivot",pivot);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(10).collectInput("k",k);} catch (Exception ex1) {ex1.printStackTrace();};
            fr.inria.lille.commons.trace.RuntimeValues.instance(10).collectOutput(runtimeAngelicValue);
            fr.inria.lille.commons.trace.RuntimeValues.instance(10).collectionEnds();
        }
        if (runtimeAngelicValue)
            above = new java.util.ArrayList<java.lang.Integer>(arr.size());

        for (java.lang.Integer x : arr) {
            if (x < pivot) {
                below.add(x);
            } else
                if (x > pivot) {
                    above.add(x);
                }

        }
        int num_less = below.size();
        int num_lessoreq = arr.size() - above.size();
        if (k < num_less) {
            return java_programs.KTH.kth(below, k);
        } else
            if (k >= num_lessoreq) {
                return java_programs.KTH.kth(above, k);
            } else {
                return pivot;
            }

    }
}
07:36:24.305 fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
07:36:24.305 fr.inria.lille.repair.nopol.NoPol - statement #12
07:36:24.305 fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation java_programs.KTH:10 which is executed by 7 tests
07:36:24.471 fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
07:36:25.766 x.java.compiler.DynamicClassCompiler - [Compilation errors]
KTH.java:27: error: variable below might not have been initialized
                below.add(x);
                ^
KTH.java:34: error: variable below might not have been initialized
        int num_less = below.size();
                       ^
07:36:25.770 f.i.l.r.n.s.ConstraintModelBuilder - Unable to compile the change: 
public class KTH {
    public static java.lang.Integer kth(java.util.ArrayList<java.lang.Integer> arr, int k) {
        int pivot = arr.get(0);
        java.util.ArrayList<java.lang.Integer> below;
        java.util.ArrayList<java.lang.Integer> above;
        boolean spoonDefaultValue = false;
        try {
            spoonDefaultValue = true;
        } catch (java.lang.Exception __NopolProcessorException) {
        }
        boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
        if (fr.inria.lille.commons.trace.RuntimeValues.instance(11).isEnabled()) {
            fr.inria.lille.commons.trace.RuntimeValues.instance(11).collectionStarts();
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(11).collectInput("arr",arr);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(11).collectInput("pivot",pivot);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(11).collectInput("k",k);} catch (Exception ex1) {ex1.printStackTrace();};
            fr.inria.lille.commons.trace.RuntimeValues.instance(11).collectOutput(runtimeAngelicValue);
            fr.inria.lille.commons.trace.RuntimeValues.instance(11).collectionEnds();
        }
        if (runtimeAngelicValue)
            below = new java.util.ArrayList<java.lang.Integer>(arr.size());

        above = new java.util.ArrayList<java.lang.Integer>(arr.size());
        for (java.lang.Integer x : arr) {
            if (x < pivot) {
                below.add(x);
            } else
                if (x > pivot) {
                    above.add(x);
                }

        }
        int num_less = below.size();
        int num_lessoreq = arr.size() - above.size();
        if (k < num_less) {
            return java_programs.KTH.kth(below, k);
        } else
            if (k >= num_lessoreq) {
                return java_programs.KTH.kth(above, k);
            } else {
                return pivot;
            }

    }
}
07:36:25.771 fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
07:36:25.771 fr.inria.lille.repair.nopol.NoPol - statement #13
07:36:25.771 fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation java_programs.KTH:8 which is executed by 7 tests
07:36:25.947 fr.inria.lille.repair.nopol.NoPol - statement #14
07:36:25.947 fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation java_programs.KTH:14 which is executed by 5 tests
07:36:26.209 fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
07:36:27.813 tests.output - Failing tests with false: 
[test_1(java_testcases.junit.KTH_Test): Index: 0, Size: 0, test_0(java_testcases.junit.KTH_Test): Index: 0, Size: 0, test_5(java_testcases.junit.KTH_Test): expected:<6> but was:<45>, test_6(java_testcases.junit.KTH_Test): Index: 0, Size: 0]
07:36:27.813 tests.output - Failing tests with true: 
[test_1(java_testcases.junit.KTH_Test): Index: 0, Size: 0, test_0(java_testcases.junit.KTH_Test): Index: 0, Size: 0, test_5(java_testcases.junit.KTH_Test): Index: 0, Size: 0, test_6(java_testcases.junit.KTH_Test): Index: 0, Size: 0]
07:36:27.813 f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation java_programs.KTH:14.
07:36:27.813 fr.inria.lille.repair.nopol.NoPol - statement #15
07:36:27.813 fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation java_programs.KTH:23 which is executed by 1 tests
07:36:27.978 fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
07:36:28.690 x.java.compiler.DynamicClassCompiler - [Compilation errors]
KTH.java:47: error: missing return statement
    }
    ^
07:36:28.692 f.i.l.r.n.s.ConstraintModelBuilder - Unable to compile the change: 
public class KTH {
    public static java.lang.Integer kth(java.util.ArrayList<java.lang.Integer> arr, int k) {
        int pivot = arr.get(0);
        java.util.ArrayList<java.lang.Integer> below;
        java.util.ArrayList<java.lang.Integer> above;
        below = new java.util.ArrayList<java.lang.Integer>(arr.size());
        above = new java.util.ArrayList<java.lang.Integer>(arr.size());
        for (java.lang.Integer x : arr) {
            if (x < pivot) {
                below.add(x);
            } else
                if (x > pivot) {
                    above.add(x);
                }

        }
        int num_less = below.size();
        int num_lessoreq = arr.size() - above.size();
        if (k < num_less) {
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(13).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("arr",arr);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("pivot",pivot);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("k",k);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("num_less",num_less);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("num_lessoreq",num_lessoreq);} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectionEnds();
            }
            if (runtimeAngelicValue)
                return java_programs.KTH.kth(below, k);

        } else
            if (k >= num_lessoreq) {
                return java_programs.KTH.kth(above, k);
            } else {
                return pivot;
            }

    }
}
07:36:28.693 fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
07:36:28.693 fr.inria.lille.repair.nopol.NoPol - ----INFORMATION----
07:36:28.695 fr.inria.lille.repair.nopol.NoPol - Nb classes : 3
07:36:28.695 fr.inria.lille.repair.nopol.NoPol - Nb methods : 9
07:36:28.696 fr.inria.lille.repair.nopol.NoPol - Nb Statements Analyzed : 14
07:36:28.696 fr.inria.lille.repair.nopol.NoPol - Nb Statements with Angelic Value Found : 0
07:36:28.696 fr.inria.lille.repair.nopol.NoPol - Nb inputs in SMT : 0
07:36:28.697 fr.inria.lille.repair.nopol.NoPol - Nb SMT level: 0
07:36:28.697 fr.inria.lille.repair.nopol.NoPol - Nb variables in SMT : 0
07:36:28.697 fr.inria.lille.repair.nopol.NoPol - NoPol Execution time : 35517ms
07:36:28.697 fr.inria.lille.repair.nopol.NoPol - 
